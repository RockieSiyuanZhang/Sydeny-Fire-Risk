{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import (absolute_import, division, print_function)\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import psycopg2\n",
    "import psycopg2.extras\n",
    "import os\n",
    "import json\n",
    "import math\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "#import shapefile\n",
    "import re\n",
    "import geopandas as gpd\n",
    "from pandas.io.json import json_normalize\n",
    "import sqlalchemy\n",
    "from shapely.geometry import Point\n",
    "from geopandas.tools import sjoin\n",
    "from geopandas import GeoSeries, GeoDataFrame\n",
    "import seaborn as sns\n",
    "from scipy.stats import pearsonr\n",
    "from scipy.stats import spearmanr\n",
    "from geoalchemy2 import Geometry, WKTElement\n",
    "\n",
    "data_path = \"\"\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cleanNull(dataset):\n",
    "    if dataset.isnull().sum().any() == 0:\n",
    "        print(\"NO NAN\")\n",
    "    else:\n",
    "        print(\"FOUND NAN\")\n",
    "        for num in list(dataset.isnull().sum()):\n",
    "            if num != 0:\n",
    "                dataset = dataset.dropna()\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pgconnect(credential_filepath):\n",
    "    try:\n",
    "        with open(credential_filepath) as f:\n",
    "            db_conn_dict = json.load(f)\n",
    "        conn = psycopg2.connect(**db_conn_dict)\n",
    "        print('connected')\n",
    "    except Exception as e:\n",
    "        print(\"unable to connect to the database\").u-yugh\n",
    "        print(e)\n",
    "        return None\n",
    "    return conn\n",
    "\n",
    "# IMPORTANT \n",
    "credfilepath = os.path.join(data_path, \"data2x01_db.json\")\n",
    "conn = pgconnect(credfilepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pgquery( conn, sqlcmd, args=None, msg=False, returntype='tuple'):\n",
    "    \"\"\" utility function to execute some SQL query statement\n",
    "        it can take optional arguments (as a dictionary) to fill in for placeholders in the SQL\n",
    "        will return the complete query result as return value - or in case of error: None\n",
    "        error and transaction handling built-in (by using the 'with' clauses)\"\"\"\n",
    "    retval = None\n",
    "    with conn:\n",
    "        cursortype = None if returntype != 'dict' else psycopg2.extras.RealDictCursor\n",
    "        with conn.cursor(cursor_factory=cursortype) as cur:\n",
    "            try:\n",
    "                if args is None:\n",
    "                    cur.execute(sqlcmd)\n",
    "                else:\n",
    "                    cur.execute(sqlcmd, args)\n",
    "                if (cur.description != None ):\n",
    "                    retval = cur.fetchall() # we use fetchall() as we expect only _small_ query results\n",
    "                if msg != False:\n",
    "                    print(\"success: \" + msg)\n",
    "            except psycopg2.DatabaseError as e:\n",
    "                if e.pgcode != None:\n",
    "                    if msg: print(\"db read error: \"+msg)\n",
    "                    print(e)\n",
    "            except Exception as e:\n",
    "                print(e)\n",
    "    return retval"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the budget data that we found from NSW.data\n",
    "URL: https://data.nsw.gov.au/data/dataset/56f0b52a-1354-4910-b681-509ecd92888e/resource/f381c222-e33b-40ca-aaa5-a6a0f6839a18/download/nswbudgetpaper2201516points.json\n",
    "\n",
    "GeoJSON points of all NSW Budget Infrastructure Statement 2015-2016 (Budget Paper 2) projects with their specific locations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NSW Budget Paper 2\n",
    "In the format of a geojson file, the report counts the financial allocations of the New South Wales government to various regions during the period from 2015 to 2016. The statistical projects include the types of funding projects, the regions of the projects, and the specific coordinates of the projects have specific funding amounts. In this report, we will focus on using the data of the location of the grant project. If the location of the grant is the same as the area_name, the area's fire_risk score will drop by 0.01. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgencyCategory</th>\n",
       "      <th>Location</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Education</td>\n",
       "      <td>Tighes Hill</td>\n",
       "      <td>MULTIPOINT (151.74456 32.90832)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Education</td>\n",
       "      <td>Parramatta</td>\n",
       "      <td>MULTIPOINT (151.00201 -33.81063)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Centennial Park</td>\n",
       "      <td>MULTIPOINT (151.23403 -33.89475)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Transport</td>\n",
       "      <td>Various</td>\n",
       "      <td>MULTIPOINT (151.68012 -32.81828, 151.34211 -33...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Community Services</td>\n",
       "      <td>Alexandria</td>\n",
       "      <td>MULTIPOINT (151.19916 -33.89774)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Mosman</td>\n",
       "      <td>MULTIPOINT (151.24348 -33.84256)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Mosman</td>\n",
       "      <td>MULTIPOINT (151.24152 -33.84246)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>352</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Dubbo</td>\n",
       "      <td>MULTIPOINT (148.58492 -32.27382)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Mosman</td>\n",
       "      <td>MULTIPOINT (151.24307 -33.84163)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Dubbo</td>\n",
       "      <td>MULTIPOINT (148.58492 -32.27382)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>355 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          AgencyCategory         Location  \\\n",
       "0              Education      Tighes Hill   \n",
       "1              Education       Parramatta   \n",
       "2    Government Services  Centennial Park   \n",
       "3              Transport          Various   \n",
       "4     Community Services       Alexandria   \n",
       "..                   ...              ...   \n",
       "350  Government Services           Mosman   \n",
       "351  Government Services           Mosman   \n",
       "352  Government Services            Dubbo   \n",
       "353  Government Services           Mosman   \n",
       "354  Government Services            Dubbo   \n",
       "\n",
       "                                              geometry  \n",
       "0                      MULTIPOINT (151.74456 32.90832)  \n",
       "1                     MULTIPOINT (151.00201 -33.81063)  \n",
       "2                     MULTIPOINT (151.23403 -33.89475)  \n",
       "3    MULTIPOINT (151.68012 -32.81828, 151.34211 -33...  \n",
       "4                     MULTIPOINT (151.19916 -33.89774)  \n",
       "..                                                 ...  \n",
       "350                   MULTIPOINT (151.24348 -33.84256)  \n",
       "351                   MULTIPOINT (151.24152 -33.84246)  \n",
       "352                   MULTIPOINT (148.58492 -32.27382)  \n",
       "353                   MULTIPOINT (151.24307 -33.84163)  \n",
       "354                   MULTIPOINT (148.58492 -32.27382)  \n",
       "\n",
       "[355 rows x 3 columns]"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filename = \"nswbudgetpaper2201516points.json\"\n",
    "own_buget_data = gpd.read_file(filename)\n",
    "own_buget_data=own_buget_data.drop(columns=['AgencyName', 'ProjectName', 'Type', 'LGA', 'Region', 'StartYear', 'CompletionYear','EstSpendTo20150630','ETC','Allocation201516'])\n",
    "own_buget_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: cleared old table\n",
      "success: create new table\n"
     ]
    }
   ],
   "source": [
    "pgquery(conn, \"DROP TABLE IF EXISTS own_buget\", msg=\"cleared old table\")\n",
    "own_schema = \"\"\"CREATE TABLE IF NOT EXISTS own_buget (\n",
    "                         AgencyCategory VARCHAR(100),\n",
    "                         Location VARCHAR(100),\n",
    "                         geometry GEOMETRY(POINT, 4326)\n",
    "                   )\"\"\"\n",
    "pgquery(conn, own_schema, msg=\"create new table\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "insert_stmt = \"\"\"INSERT INTO own_buget VALUES ( %(AgencyCategory)s, %(Location)s,\n",
    "                                            ST_PointFromText(%(geom_wkt)s, 4326) )\"\"\"\n",
    "\n",
    "own_buget_data['geom_wkt'] = own_buget_data['geometry'].apply(lambda x: x.wkt)\n",
    "\n",
    "for idx, row in own_buget_data.iterrows():\n",
    "    pgquery(conn, insert_stmt, args=row)\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgencyCategory</th>\n",
       "      <th>Location</th>\n",
       "      <th>geometry</th>\n",
       "      <th>geom_wkt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Education</td>\n",
       "      <td>Tighes Hill</td>\n",
       "      <td>MULTIPOINT (151.74456 32.90832)</td>\n",
       "      <td>MULTIPOINT (151.744558 32.908319)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Education</td>\n",
       "      <td>Parramatta</td>\n",
       "      <td>MULTIPOINT (151.00201 -33.81063)</td>\n",
       "      <td>MULTIPOINT (151.00201 -33.810626)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Centennial Park</td>\n",
       "      <td>MULTIPOINT (151.23403 -33.89475)</td>\n",
       "      <td>MULTIPOINT (151.234032112718 -33.8947495446951)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Transport</td>\n",
       "      <td>Various</td>\n",
       "      <td>MULTIPOINT (151.68012 -32.81828, 151.34211 -33...</td>\n",
       "      <td>MULTIPOINT (151.680121505 -32.818278799, 151.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Community Services</td>\n",
       "      <td>Alexandria</td>\n",
       "      <td>MULTIPOINT (151.19916 -33.89774)</td>\n",
       "      <td>MULTIPOINT (151.199162 -33.897738)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Mosman</td>\n",
       "      <td>MULTIPOINT (151.24348 -33.84256)</td>\n",
       "      <td>MULTIPOINT (151.243484139185 -33.8425580215146)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Mosman</td>\n",
       "      <td>MULTIPOINT (151.24152 -33.84246)</td>\n",
       "      <td>MULTIPOINT (151.241523281432 -33.8424593165088)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>352</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Dubbo</td>\n",
       "      <td>MULTIPOINT (148.58492 -32.27382)</td>\n",
       "      <td>MULTIPOINT (148.584919106455 -32.2738199854017)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Mosman</td>\n",
       "      <td>MULTIPOINT (151.24307 -33.84163)</td>\n",
       "      <td>MULTIPOINT (151.243068199662 -33.8416301899585)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354</th>\n",
       "      <td>Government Services</td>\n",
       "      <td>Dubbo</td>\n",
       "      <td>MULTIPOINT (148.58492 -32.27382)</td>\n",
       "      <td>MULTIPOINT (148.584919106455 -32.2738199854017)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>355 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          AgencyCategory         Location  \\\n",
       "0              Education      Tighes Hill   \n",
       "1              Education       Parramatta   \n",
       "2    Government Services  Centennial Park   \n",
       "3              Transport          Various   \n",
       "4     Community Services       Alexandria   \n",
       "..                   ...              ...   \n",
       "350  Government Services           Mosman   \n",
       "351  Government Services           Mosman   \n",
       "352  Government Services            Dubbo   \n",
       "353  Government Services           Mosman   \n",
       "354  Government Services            Dubbo   \n",
       "\n",
       "                                              geometry  \\\n",
       "0                      MULTIPOINT (151.74456 32.90832)   \n",
       "1                     MULTIPOINT (151.00201 -33.81063)   \n",
       "2                     MULTIPOINT (151.23403 -33.89475)   \n",
       "3    MULTIPOINT (151.68012 -32.81828, 151.34211 -33...   \n",
       "4                     MULTIPOINT (151.19916 -33.89774)   \n",
       "..                                                 ...   \n",
       "350                   MULTIPOINT (151.24348 -33.84256)   \n",
       "351                   MULTIPOINT (151.24152 -33.84246)   \n",
       "352                   MULTIPOINT (148.58492 -32.27382)   \n",
       "353                   MULTIPOINT (151.24307 -33.84163)   \n",
       "354                   MULTIPOINT (148.58492 -32.27382)   \n",
       "\n",
       "                                              geom_wkt  \n",
       "0                    MULTIPOINT (151.744558 32.908319)  \n",
       "1                    MULTIPOINT (151.00201 -33.810626)  \n",
       "2      MULTIPOINT (151.234032112718 -33.8947495446951)  \n",
       "3    MULTIPOINT (151.680121505 -32.818278799, 151.3...  \n",
       "4                   MULTIPOINT (151.199162 -33.897738)  \n",
       "..                                                 ...  \n",
       "350    MULTIPOINT (151.243484139185 -33.8425580215146)  \n",
       "351    MULTIPOINT (151.241523281432 -33.8424593165088)  \n",
       "352    MULTIPOINT (148.584919106455 -32.2738199854017)  \n",
       "353    MULTIPOINT (151.243068199662 -33.8416301899585)  \n",
       "354    MULTIPOINT (148.584919106455 -32.2738199854017)  \n",
       "\n",
       "[355 rows x 4 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "own_buget_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SA2_MAIN16</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101021007</td>\n",
       "      <td>POLYGON ((149.58423 -35.44427, 149.58444 -35.4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101021008</td>\n",
       "      <td>POLYGON ((149.21898 -35.36739, 149.21799 -35.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>101021009</td>\n",
       "      <td>POLYGON ((149.21325 -35.34325, 149.21619 -35.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>101021010</td>\n",
       "      <td>POLYGON ((149.24033 -35.34782, 149.24023 -35.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>101021011</td>\n",
       "      <td>POLYGON ((149.23580 -35.38738, 149.23771 -35.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2305</th>\n",
       "      <td>901021002</td>\n",
       "      <td>MULTIPOLYGON (((96.83047 -12.17636, 96.83045 -...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2306</th>\n",
       "      <td>901031003</td>\n",
       "      <td>MULTIPOLYGON (((150.69566 -35.18297, 150.69555...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2307</th>\n",
       "      <td>901041004</td>\n",
       "      <td>MULTIPOLYGON (((167.99472 -29.04534, 167.99432...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2308</th>\n",
       "      <td>997979799</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2309</th>\n",
       "      <td>999999499</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2310 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     SA2_MAIN16                                           geometry\n",
       "0     101021007  POLYGON ((149.58423 -35.44427, 149.58444 -35.4...\n",
       "1     101021008  POLYGON ((149.21898 -35.36739, 149.21799 -35.3...\n",
       "2     101021009  POLYGON ((149.21325 -35.34325, 149.21619 -35.3...\n",
       "3     101021010  POLYGON ((149.24033 -35.34782, 149.24023 -35.3...\n",
       "4     101021011  POLYGON ((149.23580 -35.38738, 149.23771 -35.3...\n",
       "...         ...                                                ...\n",
       "2305  901021002  MULTIPOLYGON (((96.83047 -12.17636, 96.83045 -...\n",
       "2306  901031003  MULTIPOLYGON (((150.69566 -35.18297, 150.69555...\n",
       "2307  901041004  MULTIPOLYGON (((167.99472 -29.04534, 167.99432...\n",
       "2308  997979799                                               None\n",
       "2309  999999499                                               None\n",
       "\n",
       "[2310 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sa2 = gpd.read_file( os.path.join(data_path, \"SA2_2016_AUST.shp\") )\n",
    "sa2 = sa2.drop(columns = ['SA2_5DIG16','SA2_NAME16','SA3_CODE16','SA3_NAME16','SA4_NAME16','SA4_CODE16','GCC_CODE16','GCC_NAME16','STE_CODE16','STE_NAME16','AREASQKM16'])\n",
    "sa2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: cleared old table\n",
      "success: create new table\n"
     ]
    }
   ],
   "source": [
    "pgquery(conn, \"DROP TABLE IF EXISTS SHAPE\", msg=\"cleared old table\")\n",
    "SHAPE_schema = '''CREATE TABLE SHAPE (\n",
    "                     SA2_MAIN16 INTEGER,\n",
    "                     geometry GEOMETRY(MULTIPOLYGON,4326))''' \n",
    "pgquery(conn, SHAPE_schema, msg=\"create new table\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n",
      "success: inserted\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sa2_main16</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101021007</td>\n",
       "      <td>0106000020E6100000010000000103000000010000005F...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101021008</td>\n",
       "      <td>0106000020E6100000010000000103000000010000002C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>101041024</td>\n",
       "      <td>0106000020E61000000800000001030000000100000028...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>101041025</td>\n",
       "      <td>0106000020E61000000300000001030000000100000013...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>101041026</td>\n",
       "      <td>0106000020E61000000100000001030000000100000044...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2305</th>\n",
       "      <td>901021002</td>\n",
       "      <td>0106000020E6100000380000000103000000010000000E...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2306</th>\n",
       "      <td>901031003</td>\n",
       "      <td>0106000020E61000000300000001030000000100000017...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2307</th>\n",
       "      <td>901041004</td>\n",
       "      <td>0106000020E61000001F0000000103000000010000000B...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2308</th>\n",
       "      <td>997979799</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2309</th>\n",
       "      <td>999999499</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2310 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      sa2_main16                                           geometry\n",
       "0      101021007  0106000020E6100000010000000103000000010000005F...\n",
       "1      101021008  0106000020E6100000010000000103000000010000002C...\n",
       "2      101041024  0106000020E61000000800000001030000000100000028...\n",
       "3      101041025  0106000020E61000000300000001030000000100000013...\n",
       "4      101041026  0106000020E61000000100000001030000000100000044...\n",
       "...          ...                                                ...\n",
       "2305   901021002  0106000020E6100000380000000103000000010000000E...\n",
       "2306   901031003  0106000020E61000000300000001030000000100000017...\n",
       "2307   901041004  0106000020E61000001F0000000103000000010000000B...\n",
       "2308   997979799                                               None\n",
       "2309   999999499                                               None\n",
       "\n",
       "[2310 rows x 2 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "insert_stmt = \"\"\"INSERT INTO SHAPE VALUES ( %(SA2_MAIN16)s, ST_Multi(ST_GeomFromText(%(geom_wkt)s, 4326) ))\"\"\"\n",
    "\n",
    "sa2['geom_wkt'] = sa2['geometry'].apply(lambda x: x.wkt if x is not None else x)\n",
    "\n",
    "for idx, row in sa2.iterrows():\n",
    "    pgquery(conn, insert_stmt, args=row, msg=\"inserted\")\n",
    "pd.read_sql_query(\"select * from SHAPE\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sa2_main16</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101021007</td>\n",
       "      <td>0106000020E6100000010000000103000000010000005F...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101021008</td>\n",
       "      <td>0106000020E6100000010000000103000000010000002C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>101041024</td>\n",
       "      <td>0106000020E61000000800000001030000000100000028...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>101041025</td>\n",
       "      <td>0106000020E61000000300000001030000000100000013...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>101041026</td>\n",
       "      <td>0106000020E61000000100000001030000000100000044...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2305</th>\n",
       "      <td>901021002</td>\n",
       "      <td>0106000020E6100000380000000103000000010000000E...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2306</th>\n",
       "      <td>901031003</td>\n",
       "      <td>0106000020E61000000300000001030000000100000017...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2307</th>\n",
       "      <td>901041004</td>\n",
       "      <td>0106000020E61000001F0000000103000000010000000B...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2308</th>\n",
       "      <td>997979799</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2309</th>\n",
       "      <td>999999499</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2310 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      sa2_main16                                           geometry\n",
       "0      101021007  0106000020E6100000010000000103000000010000005F...\n",
       "1      101021008  0106000020E6100000010000000103000000010000002C...\n",
       "2      101041024  0106000020E61000000800000001030000000100000028...\n",
       "3      101041025  0106000020E61000000300000001030000000100000013...\n",
       "4      101041026  0106000020E61000000100000001030000000100000044...\n",
       "...          ...                                                ...\n",
       "2305   901021002  0106000020E6100000380000000103000000010000000E...\n",
       "2306   901031003  0106000020E61000000300000001030000000100000017...\n",
       "2307   901041004  0106000020E61000001F0000000103000000010000000B...\n",
       "2308   997979799                                               None\n",
       "2309   999999499                                               None\n",
       "\n",
       "[2310 rows x 2 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"select * from SHAPE\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfsnsw = gpd.read_file( os.path.join(data_path, \"RFSNSW_BFPL_small.shp\") )\n",
    "#rfsnsw = gpd.read_file('RFSNSW_BFPL.shp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfsnsw.insert(loc=0, column='gid', value=rfsnsw.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gid</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>SHAPE_LENG</th>\n",
       "      <th>SHAPE_AREA</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000890</td>\n",
       "      <td>4.949777e-08</td>\n",
       "      <td>POINT (149.83171 -34.29903)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008990</td>\n",
       "      <td>1.417500e-06</td>\n",
       "      <td>POINT (149.85673 -34.29558)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.011250</td>\n",
       "      <td>1.775249e-06</td>\n",
       "      <td>POINT (149.84108 -34.29475)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.001096</td>\n",
       "      <td>3.735098e-08</td>\n",
       "      <td>POINT (149.82560 -34.28852)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.027890</td>\n",
       "      <td>6.131269e-06</td>\n",
       "      <td>POINT (149.74439 -34.26993)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45309</th>\n",
       "      <td>45309</td>\n",
       "      <td>3</td>\n",
       "      <td>0.016425</td>\n",
       "      <td>1.036849e-05</td>\n",
       "      <td>POINT (151.41863 -33.19950)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45310</th>\n",
       "      <td>45310</td>\n",
       "      <td>3</td>\n",
       "      <td>0.012095</td>\n",
       "      <td>9.113554e-06</td>\n",
       "      <td>POINT (151.40484 -33.19709)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45311</th>\n",
       "      <td>45311</td>\n",
       "      <td>3</td>\n",
       "      <td>0.050685</td>\n",
       "      <td>8.878038e-05</td>\n",
       "      <td>POINT (151.38413 -33.18942)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45312</th>\n",
       "      <td>45312</td>\n",
       "      <td>1</td>\n",
       "      <td>0.080835</td>\n",
       "      <td>8.330816e-05</td>\n",
       "      <td>POINT (151.57688 -33.13407)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45313</th>\n",
       "      <td>45313</td>\n",
       "      <td>1</td>\n",
       "      <td>0.007855</td>\n",
       "      <td>1.720524e-06</td>\n",
       "      <td>POINT (151.57565 -33.13047)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45314 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         gid  CATEGORY  SHAPE_LENG    SHAPE_AREA                     geometry\n",
       "0          0         1    0.000890  4.949777e-08  POINT (149.83171 -34.29903)\n",
       "1          1         1    0.008990  1.417500e-06  POINT (149.85673 -34.29558)\n",
       "2          2         1    0.011250  1.775249e-06  POINT (149.84108 -34.29475)\n",
       "3          3         1    0.001096  3.735098e-08  POINT (149.82560 -34.28852)\n",
       "4          4         1    0.027890  6.131269e-06  POINT (149.74439 -34.26993)\n",
       "...      ...       ...         ...           ...                          ...\n",
       "45309  45309         3    0.016425  1.036849e-05  POINT (151.41863 -33.19950)\n",
       "45310  45310         3    0.012095  9.113554e-06  POINT (151.40484 -33.19709)\n",
       "45311  45311         3    0.050685  8.878038e-05  POINT (151.38413 -33.18942)\n",
       "45312  45312         1    0.080835  8.330816e-05  POINT (151.57688 -33.13407)\n",
       "45313  45313         1    0.007855  1.720524e-06  POINT (151.57565 -33.13047)\n",
       "\n",
       "[45314 rows x 5 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfsnsw=rfsnsw.dropna()\n",
    "rfsnsw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "success: cleared old table\n",
      "success: create new table\n"
     ]
    }
   ],
   "source": [
    "pgquery(conn, \"DROP TABLE IF EXISTS RFSNSW\", msg=\"cleared old table\")\n",
    "RFS_schema = \"\"\"CREATE TABLE IF NOT EXISTS RFSNSW (\n",
    "                         gid INTEGER,\n",
    "                         CATEGORY INTEGER,\n",
    "                         SHAPE_LENG FLOAT,\n",
    "                         SHAPE_AREA\t FLOAT,\n",
    "                         geometry GEOMETRY(POINT, 4326)\n",
    "                   )\"\"\"\n",
    "pgquery(conn, RFS_schema, msg=\"create new table\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " insert done\n"
     ]
    }
   ],
   "source": [
    "insert_stmt = \"\"\"INSERT INTO rfsnsw VALUES (%(gid)s,%(CATEGORY)s, %(SHAPE_LENG)s, %(SHAPE_AREA)s,\n",
    "                                            ST_PointFromText(%(geom_wkt)s, 4326) )\"\"\"\n",
    "\n",
    "rfsnsw['geom_wkt'] = rfsnsw['geometry'].apply(lambda x: x.wkt)\n",
    "\n",
    "for idx, row in rfsnsw.iterrows():\n",
    "    pgquery(conn, insert_stmt, args=row)\n",
    "print(\" insert done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "connected\n"
     ]
    }
   ],
   "source": [
    "def pgconnect1():\n",
    "    HOST       = \"soitpw11d59.shared.sydney.edu.au\"\n",
    "    DB_USER    = \"y21s1d2x01_szha6596\"\n",
    "    DB_PW      = \"490268436\"\n",
    "    DEFAULT_DB = \"y21s1d2x01_szha6596\"\n",
    "    connection = 'postgresql+psycopg2://'+DB_USER+':'+DB_PW+'@'+HOST+'/'+DEFAULT_DB\n",
    "    db = sqlalchemy.create_engine(connection, echo=False)\n",
    "    conn = db.connect()\n",
    "    print('connected')\n",
    "    return db,conn   \n",
    "\n",
    "db, conn = pgconnect1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gid</th>\n",
       "      <th>category</th>\n",
       "      <th>shape_leng</th>\n",
       "      <th>shape_area</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000890</td>\n",
       "      <td>4.949777e-08</td>\n",
       "      <td>0101000020E6100000A6C14A5E9DBA6240BC28CBBA4626...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.008990</td>\n",
       "      <td>1.417500e-06</td>\n",
       "      <td>0101000020E6100000B053865C6ABB6240A5762C7ED525...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.011250</td>\n",
       "      <td>1.775249e-06</td>\n",
       "      <td>0101000020E61000003603591AEABA6240E4C61C6CBA25...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.001096</td>\n",
       "      <td>3.735098e-08</td>\n",
       "      <td>0101000020E61000006EEAB2506BBA624081A4D314EE24...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.027890</td>\n",
       "      <td>6.131269e-06</td>\n",
       "      <td>0101000020E6100000599ABD10D2B76240B1B4FAE98C22...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45309</th>\n",
       "      <td>45309</td>\n",
       "      <td>3</td>\n",
       "      <td>0.016425</td>\n",
       "      <td>1.036849e-05</td>\n",
       "      <td>0101000020E61000005BB6256965ED6240530035428999...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45310</th>\n",
       "      <td>45310</td>\n",
       "      <td>3</td>\n",
       "      <td>0.012095</td>\n",
       "      <td>9.113554e-06</td>\n",
       "      <td>0101000020E61000004F48CF6BF4EC6240922839293A99...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45311</th>\n",
       "      <td>45311</td>\n",
       "      <td>3</td>\n",
       "      <td>0.050685</td>\n",
       "      <td>8.878038e-05</td>\n",
       "      <td>0101000020E6100000022C46C14AEC6240DC2A65F53E98...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45312</th>\n",
       "      <td>45312</td>\n",
       "      <td>1</td>\n",
       "      <td>0.080835</td>\n",
       "      <td>8.330816e-05</td>\n",
       "      <td>0101000020E6100000C5641AD475F26240BE4E31512991...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45313</th>\n",
       "      <td>45313</td>\n",
       "      <td>1</td>\n",
       "      <td>0.007855</td>\n",
       "      <td>1.720524e-06</td>\n",
       "      <td>0101000020E61000006206E4B76BF262405C59D246B390...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>45314 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         gid  category  shape_leng    shape_area  \\\n",
       "0          0         1    0.000890  4.949777e-08   \n",
       "1          1         1    0.008990  1.417500e-06   \n",
       "2          2         1    0.011250  1.775249e-06   \n",
       "3          3         1    0.001096  3.735098e-08   \n",
       "4          4         1    0.027890  6.131269e-06   \n",
       "...      ...       ...         ...           ...   \n",
       "45309  45309         3    0.016425  1.036849e-05   \n",
       "45310  45310         3    0.012095  9.113554e-06   \n",
       "45311  45311         3    0.050685  8.878038e-05   \n",
       "45312  45312         1    0.080835  8.330816e-05   \n",
       "45313  45313         1    0.007855  1.720524e-06   \n",
       "\n",
       "                                                geometry  \n",
       "0      0101000020E6100000A6C14A5E9DBA6240BC28CBBA4626...  \n",
       "1      0101000020E6100000B053865C6ABB6240A5762C7ED525...  \n",
       "2      0101000020E61000003603591AEABA6240E4C61C6CBA25...  \n",
       "3      0101000020E61000006EEAB2506BBA624081A4D314EE24...  \n",
       "4      0101000020E6100000599ABD10D2B76240B1B4FAE98C22...  \n",
       "...                                                  ...  \n",
       "45309  0101000020E61000005BB6256965ED6240530035428999...  \n",
       "45310  0101000020E61000004F48CF6BF4EC6240922839293A99...  \n",
       "45311  0101000020E6100000022C46C14AEC6240DC2A65F53E98...  \n",
       "45312  0101000020E6100000C5641AD475F26240BE4E31512991...  \n",
       "45313  0101000020E61000006206E4B76BF262405C59D246B390...  \n",
       "\n",
       "[45314 rows x 5 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"select * from rfsnsw\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "sa2_full = gpd.read_file( os.path.join(data_path, \"SA2_2016_AUST.shp\") )\n",
    "sa2_clean=sa2_full.loc[sa2.is_valid]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gid</th>\n",
       "      <th>category</th>\n",
       "      <th>shape_leng</th>\n",
       "      <th>shape_area</th>\n",
       "      <th>sa2_main16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26097</td>\n",
       "      <td>3</td>\n",
       "      <td>0.072907</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>103031070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26098</td>\n",
       "      <td>3</td>\n",
       "      <td>0.072907</td>\n",
       "      <td>0.000039</td>\n",
       "      <td>103031070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26166</td>\n",
       "      <td>3</td>\n",
       "      <td>0.020212</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>103031070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26167</td>\n",
       "      <td>3</td>\n",
       "      <td>0.020212</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>103031070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26169</td>\n",
       "      <td>3</td>\n",
       "      <td>0.018436</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>103031070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44747</th>\n",
       "      <td>43239</td>\n",
       "      <td>1</td>\n",
       "      <td>0.890178</td>\n",
       "      <td>0.001108</td>\n",
       "      <td>128021609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44748</th>\n",
       "      <td>43240</td>\n",
       "      <td>1</td>\n",
       "      <td>0.890178</td>\n",
       "      <td>0.001108</td>\n",
       "      <td>128021609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44749</th>\n",
       "      <td>43241</td>\n",
       "      <td>1</td>\n",
       "      <td>0.890178</td>\n",
       "      <td>0.001108</td>\n",
       "      <td>128021609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44750</th>\n",
       "      <td>43242</td>\n",
       "      <td>1</td>\n",
       "      <td>0.890178</td>\n",
       "      <td>0.001108</td>\n",
       "      <td>128021609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>43243</td>\n",
       "      <td>1</td>\n",
       "      <td>0.890178</td>\n",
       "      <td>0.001108</td>\n",
       "      <td>128021609</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44752 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         gid  category  shape_leng  shape_area  sa2_main16\n",
       "0      26097         3    0.072907    0.000039   103031070\n",
       "1      26098         3    0.072907    0.000039   103031070\n",
       "2      26166         3    0.020212    0.000005   103031070\n",
       "3      26167         3    0.020212    0.000005   103031070\n",
       "4      26169         3    0.018436    0.000005   103031070\n",
       "...      ...       ...         ...         ...         ...\n",
       "44747  43239         1    0.890178    0.001108   128021609\n",
       "44748  43240         1    0.890178    0.001108   128021609\n",
       "44749  43241         1    0.890178    0.001108   128021609\n",
       "44750  43242         1    0.890178    0.001108   128021609\n",
       "44751  43243         1    0.890178    0.001108   128021609\n",
       "\n",
       "[44752 rows x 5 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query=\"\"\"\n",
    "SELECT * FROM\n",
    "(\n",
    "SELECT rfsnsw.gid, rfsnsw.category, rfsnsw.shape_leng, rfsnsw.shape_area, SHAPE.sa2_main16\n",
    "FROM rfsnsw\n",
    "INNER JOIN SHAPE\n",
    "ON ST_Contains(SHAPE.geometry, rfsnsw.geometry)\n",
    ") AS nsw_all_bf\n",
    "WHERE nsw_all_bf.sa2_main16 IN\n",
    "(\n",
    "SELECT SHAPE.sa2_main16\n",
    "FROM neighbourhoods\n",
    "INNER JOIN SHAPE\n",
    "ON neighbourhoods.area_id=SHAPE.sa2_main16\n",
    ")\n",
    "\"\"\"\n",
    "sa2_rfs = pd.read_sql_query(query, conn)\n",
    "sa2_rfs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bfpl_count(number,category):\n",
    "    status = {1: 3, 2: 1, 3: 2}\n",
    "    return number * status[category]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "sa2_rfs['bfls'] = sa2_rfs.apply(lambda x: bfpl_count(x['shape_area'],x['category']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "sa2_rfs2=sa2_rfs.drop(columns=['shape_area','shape_leng','category'])\n",
    "sa2_rfs2.columns=['gid','area_id','bfls']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gid</th>\n",
       "      <th>area_id</th>\n",
       "      <th>bfls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26097</td>\n",
       "      <td>103031070</td>\n",
       "      <td>0.000079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26098</td>\n",
       "      <td>103031070</td>\n",
       "      <td>0.000079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>26166</td>\n",
       "      <td>103031070</td>\n",
       "      <td>0.000010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26167</td>\n",
       "      <td>103031070</td>\n",
       "      <td>0.000010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26169</td>\n",
       "      <td>103031070</td>\n",
       "      <td>0.000010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44747</th>\n",
       "      <td>43239</td>\n",
       "      <td>128021609</td>\n",
       "      <td>0.003323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44748</th>\n",
       "      <td>43240</td>\n",
       "      <td>128021609</td>\n",
       "      <td>0.003323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44749</th>\n",
       "      <td>43241</td>\n",
       "      <td>128021609</td>\n",
       "      <td>0.003323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44750</th>\n",
       "      <td>43242</td>\n",
       "      <td>128021609</td>\n",
       "      <td>0.003323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44751</th>\n",
       "      <td>43243</td>\n",
       "      <td>128021609</td>\n",
       "      <td>0.003323</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44752 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         gid    area_id      bfls\n",
       "0      26097  103031070  0.000079\n",
       "1      26098  103031070  0.000079\n",
       "2      26166  103031070  0.000010\n",
       "3      26167  103031070  0.000010\n",
       "4      26169  103031070  0.000010\n",
       "...      ...        ...       ...\n",
       "44747  43239  128021609  0.003323\n",
       "44748  43240  128021609  0.003323\n",
       "44749  43241  128021609  0.003323\n",
       "44750  43242  128021609  0.003323\n",
       "44751  43243  128021609  0.003323\n",
       "\n",
       "[44752 rows x 3 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sa2_rfs2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>bfls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101051540</td>\n",
       "      <td>1.141128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>0.000266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>0.010562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>0.105012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>0.001336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>128021537</td>\n",
       "      <td>0.194093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>128021538</td>\n",
       "      <td>0.000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>128021607</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>128021608</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>128021609</td>\n",
       "      <td>0.026589</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id      bfls\n",
       "0    101051540  1.141128\n",
       "1    102011028  0.000266\n",
       "2    102011029  0.010562\n",
       "3    102011030  0.105012\n",
       "4    102011031  0.001336\n",
       "..         ...       ...\n",
       "191  128021537  0.194093\n",
       "192  128021538  0.000005\n",
       "193  128021607  0.000016\n",
       "194  128021608  0.000016\n",
       "195  128021609  0.026589\n",
       "\n",
       "[196 rows x 2 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sa2_rfs2 = sa2_rfs2.groupby(['area_id']).agg('bfls').sum().reset_index()\n",
    "sa2_rfs2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x1b76c5f7040>"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS STATISICALAREA\")\n",
    "areas_schema = \"\"\"CREATE TABLE IF NOT EXISTS STATISICALAREA (\n",
    "                         area_id INTEGER,\n",
    "                         area_name VARCHAR(100),\n",
    "                         parent_area_id INTEGER,\n",
    "                         PRIMARY KEY(area_id)\n",
    "                   )\"\"\"\n",
    "conn.execute(areas_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "area_data = pd.read_csv('StatisticalAreas.csv', index_col=0)\n",
    "area_data.dropna()\n",
    "table_name = \"Statisticalareas\"\n",
    "area_data.to_sql(table_name, con=conn, if_exists='append')\n",
    "#areas_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>area_name</th>\n",
       "      <th>parent_area_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>Greater Sydney</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>Victoria</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>Greater Melbourne</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>429</th>\n",
       "      <td>106</td>\n",
       "      <td>Hunter Valley exc Newcastle</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>430</th>\n",
       "      <td>11102</td>\n",
       "      <td>Lake Macquarie - West</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431</th>\n",
       "      <td>111</td>\n",
       "      <td>Newcastle and Lake Macquarie</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432</th>\n",
       "      <td>11402</td>\n",
       "      <td>Southern Highlands</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>433</th>\n",
       "      <td>114</td>\n",
       "      <td>Southern Highlands and Shoalhaven</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>434 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     area_id                          area_name  parent_area_id\n",
       "0          1                    New South Wales               0\n",
       "1         10                     Greater Sydney               1\n",
       "2         11                        Rest of NSW               1\n",
       "3          2                           Victoria               0\n",
       "4         20                  Greater Melbourne               2\n",
       "..       ...                                ...             ...\n",
       "429      106        Hunter Valley exc Newcastle              11\n",
       "430    11102              Lake Macquarie - West             111\n",
       "431      111       Newcastle and Lake Macquarie              11\n",
       "432    11402                 Southern Highlands             114\n",
       "433      114  Southern Highlands and Shoalhaven              11\n",
       "\n",
       "[434 rows x 3 columns]"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"select * from Statisticalareas\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x216f4da9c70>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS BUSINESS\")\n",
    "business_schema = \"\"\"CREATE TABLE IF NOT EXISTS BUSINESS (\n",
    "                         area_id INTEGER PRIMARY KEY,\n",
    "                         area_name VARCHAR(100),\n",
    "                         number_of_businesses INTEGER,\n",
    "                         health_care_and_social_assistance INTEGER,\n",
    "                         public_administration_and_safety INTEGER                        \n",
    "                   )\"\"\"\n",
    "conn.execute(business_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "population_data = pd.read_csv('BusinessStats.csv', index_col=0)\n",
    "# Drop unnecessary columns\n",
    "population_data = population_data.drop(columns=['accommodation_and_food_services','retail_trade','agriculture_forestry_and_fishing','transport_postal_and_warehousing'])\n",
    "\n",
    "# Rename columns\n",
    "population_data.columns = [ 'area_name', 'number_of_businesses' ,'health_care_and_social_assistance', 'public_administration_and_safety']\n",
    "table_name = \"business\"\n",
    "\n",
    "population_data.to_sql(table_name, con=conn, if_exists='append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>area_name</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>health_care_and_social_assistance</th>\n",
       "      <th>public_administration_and_safety</th>\n",
       "      <th>business_density</th>\n",
       "      <th>assistive_service_density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302031035</td>\n",
       "      <td>Boondall</td>\n",
       "      <td>545</td>\n",
       "      <td>32</td>\n",
       "      <td>3</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302031036</td>\n",
       "      <td>Brisbane Airport</td>\n",
       "      <td>225</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302031037</td>\n",
       "      <td>Eagle Farm - Pinkenba</td>\n",
       "      <td>697</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>302031038</td>\n",
       "      <td>Northgate - Virginia</td>\n",
       "      <td>1087</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>302031039</td>\n",
       "      <td>Nudgee - Banyo</td>\n",
       "      <td>897</td>\n",
       "      <td>32</td>\n",
       "      <td>5</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2296</th>\n",
       "      <td>302021030</td>\n",
       "      <td>Geebung</td>\n",
       "      <td>733</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2297</th>\n",
       "      <td>302021031</td>\n",
       "      <td>Kedron - Gordon Park</td>\n",
       "      <td>1256</td>\n",
       "      <td>80</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2298</th>\n",
       "      <td>302021032</td>\n",
       "      <td>Stafford</td>\n",
       "      <td>714</td>\n",
       "      <td>54</td>\n",
       "      <td>3</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2299</th>\n",
       "      <td>302021033</td>\n",
       "      <td>Stafford Heights</td>\n",
       "      <td>382</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2300</th>\n",
       "      <td>302021034</td>\n",
       "      <td>Wavell Heights</td>\n",
       "      <td>822</td>\n",
       "      <td>67</td>\n",
       "      <td>3</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2301 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_id              area_name  number_of_businesses  \\\n",
       "0     302031035               Boondall                   545   \n",
       "1     302031036       Brisbane Airport                   225   \n",
       "2     302031037  Eagle Farm - Pinkenba                   697   \n",
       "3     302031038   Northgate - Virginia                  1087   \n",
       "4     302031039         Nudgee - Banyo                   897   \n",
       "...         ...                    ...                   ...   \n",
       "2296  302021030                Geebung                   733   \n",
       "2297  302021031   Kedron - Gordon Park                  1256   \n",
       "2298  302021032               Stafford                   714   \n",
       "2299  302021033       Stafford Heights                   382   \n",
       "2300  302021034         Wavell Heights                   822   \n",
       "\n",
       "      health_care_and_social_assistance  public_administration_and_safety  \\\n",
       "0                                    32                                 3   \n",
       "1                                     8                                 0   \n",
       "2                                    11                                 5   \n",
       "3                                    19                                 0   \n",
       "4                                    32                                 5   \n",
       "...                                 ...                               ...   \n",
       "2296                                 14                                 3   \n",
       "2297                                 80                                 6   \n",
       "2298                                 54                                 3   \n",
       "2299                                 23                                 0   \n",
       "2300                                 67                                 3   \n",
       "\n",
       "     business_density assistive_service_density  \n",
       "0                None                      None  \n",
       "1                None                      None  \n",
       "2                None                      None  \n",
       "3                None                      None  \n",
       "4                None                      None  \n",
       "...               ...                       ...  \n",
       "2296             None                      None  \n",
       "2297             None                      None  \n",
       "2298             None                      None  \n",
       "2299             None                      None  \n",
       "2300             None                      None  \n",
       "\n",
       "[2301 rows x 7 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"select * from business\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x216f93a1790>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS NEIGHBOURHOODS\")\n",
    "neighbourhood_schema = \"\"\"CREATE TABLE IF NOT EXISTS NEIGHBOURHOODS (\n",
    "                         area_id INTEGER PRIMARY KEY,\n",
    "                         area_name VARCHAR(100),\n",
    "                         land_area FLOAT,\n",
    "                         population INTEGER,\n",
    "                         number_of_dwellings INTEGER,\n",
    "                         number_of_businesses INTEGER,\n",
    "                         median_annual_household_income INTEGER,\n",
    "                         avg_monthly_rent INTEGER\n",
    "                         \n",
    "                         \n",
    "                   )\"\"\"\n",
    "conn.execute(neighbourhood_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbourhoods_data = pd.read_csv('Neighbourhoods.csv', thousands=\",\",index_col=0)\n",
    "neighbourhoods_data.dropna()\n",
    "table_name = \"neighbourhoods\"\n",
    "neighbourhoods_data.to_sql(table_name, con=conn, if_exists='append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>area_name</th>\n",
       "      <th>land_area</th>\n",
       "      <th>population</th>\n",
       "      <th>number_of_dwellings</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>median_annual_household_income</th>\n",
       "      <th>avg_monthly_rent</th>\n",
       "      <th>population_density</th>\n",
       "      <th>dwelling_density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>119021366</td>\n",
       "      <td>Punchbowl</td>\n",
       "      <td>524.6000</td>\n",
       "      <td>21935.0</td>\n",
       "      <td>4809</td>\n",
       "      <td>2171.0</td>\n",
       "      <td>36909.0</td>\n",
       "      <td>1581.0</td>\n",
       "      <td>41.812810</td>\n",
       "      <td>9.166984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>Avoca Beach - Copacabana</td>\n",
       "      <td>643.8000</td>\n",
       "      <td>7590.0</td>\n",
       "      <td>2325</td>\n",
       "      <td>738.0</td>\n",
       "      <td>46996.0</td>\n",
       "      <td>1906.0</td>\n",
       "      <td>11.789376</td>\n",
       "      <td>3.611370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>Box Head - MacMasters Beach</td>\n",
       "      <td>3208.6000</td>\n",
       "      <td>10986.0</td>\n",
       "      <td>3847</td>\n",
       "      <td>907.0</td>\n",
       "      <td>42621.0</td>\n",
       "      <td>1682.0</td>\n",
       "      <td>3.423923</td>\n",
       "      <td>1.198965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>Calga - Kulnura</td>\n",
       "      <td>76795.1000</td>\n",
       "      <td>4841.0</td>\n",
       "      <td>1575</td>\n",
       "      <td>1102.0</td>\n",
       "      <td>42105.0</td>\n",
       "      <td>1182.0</td>\n",
       "      <td>0.063038</td>\n",
       "      <td>0.020509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>Erina - Green Point</td>\n",
       "      <td>3379.3000</td>\n",
       "      <td>14237.0</td>\n",
       "      <td>4450</td>\n",
       "      <td>1666.0</td>\n",
       "      <td>43481.0</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>4.213003</td>\n",
       "      <td>1.316841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td>106011109</td>\n",
       "      <td>Cessnock Region</td>\n",
       "      <td>1570.4341</td>\n",
       "      <td>7931.0</td>\n",
       "      <td>3281</td>\n",
       "      <td>673.0</td>\n",
       "      <td>73164.0</td>\n",
       "      <td>1080.0</td>\n",
       "      <td>5.050196</td>\n",
       "      <td>2.089231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>106011113</td>\n",
       "      <td>Singleton Region</td>\n",
       "      <td>4067.2349</td>\n",
       "      <td>4919.0</td>\n",
       "      <td>2055</td>\n",
       "      <td>698.0</td>\n",
       "      <td>87984.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1.209421</td>\n",
       "      <td>0.505257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319</th>\n",
       "      <td>111021218</td>\n",
       "      <td>Morisset - Cooranbong</td>\n",
       "      <td>330.5208</td>\n",
       "      <td>14959.0</td>\n",
       "      <td>6298</td>\n",
       "      <td>1154.0</td>\n",
       "      <td>58084.0</td>\n",
       "      <td>1260.0</td>\n",
       "      <td>45.258876</td>\n",
       "      <td>19.054777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>114021285</td>\n",
       "      <td>Hill Top - Colo Vale</td>\n",
       "      <td>174.3752</td>\n",
       "      <td>6025.0</td>\n",
       "      <td>2249</td>\n",
       "      <td>400.0</td>\n",
       "      <td>81120.0</td>\n",
       "      <td>1512.0</td>\n",
       "      <td>34.551932</td>\n",
       "      <td>12.897476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321</th>\n",
       "      <td>114021289</td>\n",
       "      <td>Southern Highlands</td>\n",
       "      <td>1409.7013</td>\n",
       "      <td>6589.0</td>\n",
       "      <td>3405</td>\n",
       "      <td>856.0</td>\n",
       "      <td>65572.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>4.674040</td>\n",
       "      <td>2.415405</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>322 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id                    area_name   land_area  population  \\\n",
       "0    119021366                    Punchbowl    524.6000     21935.0   \n",
       "1    102011028     Avoca Beach - Copacabana    643.8000      7590.0   \n",
       "2    102011029  Box Head - MacMasters Beach   3208.6000     10986.0   \n",
       "3    102011030              Calga - Kulnura  76795.1000      4841.0   \n",
       "4    102011031          Erina - Green Point   3379.3000     14237.0   \n",
       "..         ...                          ...         ...         ...   \n",
       "317  106011109              Cessnock Region   1570.4341      7931.0   \n",
       "318  106011113             Singleton Region   4067.2349      4919.0   \n",
       "319  111021218        Morisset - Cooranbong    330.5208     14959.0   \n",
       "320  114021285         Hill Top - Colo Vale    174.3752      6025.0   \n",
       "321  114021289           Southern Highlands   1409.7013      6589.0   \n",
       "\n",
       "     number_of_dwellings  number_of_businesses  \\\n",
       "0                   4809                2171.0   \n",
       "1                   2325                 738.0   \n",
       "2                   3847                 907.0   \n",
       "3                   1575                1102.0   \n",
       "4                   4450                1666.0   \n",
       "..                   ...                   ...   \n",
       "317                 3281                 673.0   \n",
       "318                 2055                 698.0   \n",
       "319                 6298                1154.0   \n",
       "320                 2249                 400.0   \n",
       "321                 3405                 856.0   \n",
       "\n",
       "     median_annual_household_income  avg_monthly_rent  population_density  \\\n",
       "0                           36909.0            1581.0           41.812810   \n",
       "1                           46996.0            1906.0           11.789376   \n",
       "2                           42621.0            1682.0            3.423923   \n",
       "3                           42105.0            1182.0            0.063038   \n",
       "4                           43481.0            1595.0            4.213003   \n",
       "..                              ...               ...                 ...   \n",
       "317                         73164.0            1080.0            5.050196   \n",
       "318                         87984.0            1000.0            1.209421   \n",
       "319                         58084.0            1260.0           45.258876   \n",
       "320                         81120.0            1512.0           34.551932   \n",
       "321                         65572.0            1200.0            4.674040   \n",
       "\n",
       "     dwelling_density  \n",
       "0            9.166984  \n",
       "1            3.611370  \n",
       "2            1.198965  \n",
       "3            0.020509  \n",
       "4            1.316841  \n",
       "..                ...  \n",
       "317          2.089231  \n",
       "318          0.505257  \n",
       "319         19.054777  \n",
       "320         12.897476  \n",
       "321          2.415405  \n",
       "\n",
       "[322 rows x 10 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"select * from Neighbourhoods\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x216f97bf4f0>"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.execute(\"ALTER TABLE Neighbourhoods ADD IF NOT EXISTS population_density FLOAT\")\n",
    "conn.execute(\"ALTER TABLE Neighbourhoods ADD IF NOT EXISTS dwelling_density FLOAT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x2168928d850>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cal_schema =\" UPDATE Neighbourhoods SET population_density = (population / land_area)\"\n",
    "conn.execute(cal_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x216f910b940>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cal_schema =\" UPDATE Neighbourhoods SET dwelling_density = (number_of_dwellings/land_area) \"\n",
    "conn.execute(cal_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>area_name</th>\n",
       "      <th>land_area</th>\n",
       "      <th>population</th>\n",
       "      <th>number_of_dwellings</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>median_annual_household_income</th>\n",
       "      <th>avg_monthly_rent</th>\n",
       "      <th>population_density</th>\n",
       "      <th>dwelling_density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>119021366</td>\n",
       "      <td>Punchbowl</td>\n",
       "      <td>524.6000</td>\n",
       "      <td>21935.0</td>\n",
       "      <td>4809</td>\n",
       "      <td>2171.0</td>\n",
       "      <td>36909.0</td>\n",
       "      <td>1581.0</td>\n",
       "      <td>41.812810</td>\n",
       "      <td>9.166984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>Avoca Beach - Copacabana</td>\n",
       "      <td>643.8000</td>\n",
       "      <td>7590.0</td>\n",
       "      <td>2325</td>\n",
       "      <td>738.0</td>\n",
       "      <td>46996.0</td>\n",
       "      <td>1906.0</td>\n",
       "      <td>11.789376</td>\n",
       "      <td>3.611370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>Box Head - MacMasters Beach</td>\n",
       "      <td>3208.6000</td>\n",
       "      <td>10986.0</td>\n",
       "      <td>3847</td>\n",
       "      <td>907.0</td>\n",
       "      <td>42621.0</td>\n",
       "      <td>1682.0</td>\n",
       "      <td>3.423923</td>\n",
       "      <td>1.198965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>Calga - Kulnura</td>\n",
       "      <td>76795.1000</td>\n",
       "      <td>4841.0</td>\n",
       "      <td>1575</td>\n",
       "      <td>1102.0</td>\n",
       "      <td>42105.0</td>\n",
       "      <td>1182.0</td>\n",
       "      <td>0.063038</td>\n",
       "      <td>0.020509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>Erina - Green Point</td>\n",
       "      <td>3379.3000</td>\n",
       "      <td>14237.0</td>\n",
       "      <td>4450</td>\n",
       "      <td>1666.0</td>\n",
       "      <td>43481.0</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>4.213003</td>\n",
       "      <td>1.316841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td>106011109</td>\n",
       "      <td>Cessnock Region</td>\n",
       "      <td>1570.4341</td>\n",
       "      <td>7931.0</td>\n",
       "      <td>3281</td>\n",
       "      <td>673.0</td>\n",
       "      <td>73164.0</td>\n",
       "      <td>1080.0</td>\n",
       "      <td>5.050196</td>\n",
       "      <td>2.089231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>106011113</td>\n",
       "      <td>Singleton Region</td>\n",
       "      <td>4067.2349</td>\n",
       "      <td>4919.0</td>\n",
       "      <td>2055</td>\n",
       "      <td>698.0</td>\n",
       "      <td>87984.0</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>1.209421</td>\n",
       "      <td>0.505257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319</th>\n",
       "      <td>111021218</td>\n",
       "      <td>Morisset - Cooranbong</td>\n",
       "      <td>330.5208</td>\n",
       "      <td>14959.0</td>\n",
       "      <td>6298</td>\n",
       "      <td>1154.0</td>\n",
       "      <td>58084.0</td>\n",
       "      <td>1260.0</td>\n",
       "      <td>45.258876</td>\n",
       "      <td>19.054777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>114021285</td>\n",
       "      <td>Hill Top - Colo Vale</td>\n",
       "      <td>174.3752</td>\n",
       "      <td>6025.0</td>\n",
       "      <td>2249</td>\n",
       "      <td>400.0</td>\n",
       "      <td>81120.0</td>\n",
       "      <td>1512.0</td>\n",
       "      <td>34.551932</td>\n",
       "      <td>12.897476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321</th>\n",
       "      <td>114021289</td>\n",
       "      <td>Southern Highlands</td>\n",
       "      <td>1409.7013</td>\n",
       "      <td>6589.0</td>\n",
       "      <td>3405</td>\n",
       "      <td>856.0</td>\n",
       "      <td>65572.0</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>4.674040</td>\n",
       "      <td>2.415405</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>322 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id                    area_name   land_area  population  \\\n",
       "0    119021366                    Punchbowl    524.6000     21935.0   \n",
       "1    102011028     Avoca Beach - Copacabana    643.8000      7590.0   \n",
       "2    102011029  Box Head - MacMasters Beach   3208.6000     10986.0   \n",
       "3    102011030              Calga - Kulnura  76795.1000      4841.0   \n",
       "4    102011031          Erina - Green Point   3379.3000     14237.0   \n",
       "..         ...                          ...         ...         ...   \n",
       "317  106011109              Cessnock Region   1570.4341      7931.0   \n",
       "318  106011113             Singleton Region   4067.2349      4919.0   \n",
       "319  111021218        Morisset - Cooranbong    330.5208     14959.0   \n",
       "320  114021285         Hill Top - Colo Vale    174.3752      6025.0   \n",
       "321  114021289           Southern Highlands   1409.7013      6589.0   \n",
       "\n",
       "     number_of_dwellings  number_of_businesses  \\\n",
       "0                   4809                2171.0   \n",
       "1                   2325                 738.0   \n",
       "2                   3847                 907.0   \n",
       "3                   1575                1102.0   \n",
       "4                   4450                1666.0   \n",
       "..                   ...                   ...   \n",
       "317                 3281                 673.0   \n",
       "318                 2055                 698.0   \n",
       "319                 6298                1154.0   \n",
       "320                 2249                 400.0   \n",
       "321                 3405                 856.0   \n",
       "\n",
       "     median_annual_household_income  avg_monthly_rent  population_density  \\\n",
       "0                           36909.0            1581.0           41.812810   \n",
       "1                           46996.0            1906.0           11.789376   \n",
       "2                           42621.0            1682.0            3.423923   \n",
       "3                           42105.0            1182.0            0.063038   \n",
       "4                           43481.0            1595.0            4.213003   \n",
       "..                              ...               ...                 ...   \n",
       "317                         73164.0            1080.0            5.050196   \n",
       "318                         87984.0            1000.0            1.209421   \n",
       "319                         58084.0            1260.0           45.258876   \n",
       "320                         81120.0            1512.0           34.551932   \n",
       "321                         65572.0            1200.0            4.674040   \n",
       "\n",
       "     dwelling_density  \n",
       "0            9.166984  \n",
       "1            3.611370  \n",
       "2            1.198965  \n",
       "3            0.020509  \n",
       "4            1.316841  \n",
       "..                ...  \n",
       "317          2.089231  \n",
       "318          0.505257  \n",
       "319         19.054777  \n",
       "320         12.897476  \n",
       "321          2.415405  \n",
       "\n",
       "[322 rows x 10 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"SELECT * FROM neighbourhoods\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>population</th>\n",
       "      <th>SHAPE_AREA</th>\n",
       "      <th>number_of_dwellings</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>health_care_and_social_assistance</th>\n",
       "      <th>public_administration_and_safety</th>\n",
       "      <th>land_area</th>\n",
       "      <th>population_density</th>\n",
       "      <th>dwelling_density</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>area_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101051540</th>\n",
       "      <td>12670.0</td>\n",
       "      <td>0.242719</td>\n",
       "      <td>6817</td>\n",
       "      <td>1891</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>9035.1221</td>\n",
       "      <td>1.402305</td>\n",
       "      <td>0.754500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011028</th>\n",
       "      <td>7590.0</td>\n",
       "      <td>0.000093</td>\n",
       "      <td>2325</td>\n",
       "      <td>724</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>643.8000</td>\n",
       "      <td>11.789376</td>\n",
       "      <td>3.611370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011029</th>\n",
       "      <td>10986.0</td>\n",
       "      <td>0.001989</td>\n",
       "      <td>3847</td>\n",
       "      <td>934</td>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>3208.6000</td>\n",
       "      <td>3.423923</td>\n",
       "      <td>1.198965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011030</th>\n",
       "      <td>4841.0</td>\n",
       "      <td>0.012135</td>\n",
       "      <td>1575</td>\n",
       "      <td>1134</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>76795.1000</td>\n",
       "      <td>0.063038</td>\n",
       "      <td>0.020509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011031</th>\n",
       "      <td>14237.0</td>\n",
       "      <td>0.000364</td>\n",
       "      <td>4450</td>\n",
       "      <td>1712</td>\n",
       "      <td>179</td>\n",
       "      <td>12</td>\n",
       "      <td>3379.3000</td>\n",
       "      <td>4.213003</td>\n",
       "      <td>1.316841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021537</th>\n",
       "      <td>28.0</td>\n",
       "      <td>0.013419</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13933.4000</td>\n",
       "      <td>0.002010</td>\n",
       "      <td>0.000287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021538</th>\n",
       "      <td>21760.0</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>6924</td>\n",
       "      <td>2136</td>\n",
       "      <td>127</td>\n",
       "      <td>17</td>\n",
       "      <td>775.5000</td>\n",
       "      <td>28.059317</td>\n",
       "      <td>8.928433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021607</th>\n",
       "      <td>17424.0</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>5219</td>\n",
       "      <td>1106</td>\n",
       "      <td>82</td>\n",
       "      <td>9</td>\n",
       "      <td>895.4000</td>\n",
       "      <td>19.459459</td>\n",
       "      <td>5.828680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021608</th>\n",
       "      <td>7426.0</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>2177</td>\n",
       "      <td>452</td>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>384.4000</td>\n",
       "      <td>19.318418</td>\n",
       "      <td>5.663371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021609</th>\n",
       "      <td>3681.0</td>\n",
       "      <td>0.001110</td>\n",
       "      <td>1050</td>\n",
       "      <td>265</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>313.7000</td>\n",
       "      <td>11.734141</td>\n",
       "      <td>3.347147</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           population  SHAPE_AREA  number_of_dwellings  number_of_businesses  \\\n",
       "area_id                                                                        \n",
       "101051540     12670.0    0.242719                 6817                  1891   \n",
       "102011028      7590.0    0.000093                 2325                   724   \n",
       "102011029     10986.0    0.001989                 3847                   934   \n",
       "102011030      4841.0    0.012135                 1575                  1134   \n",
       "102011031     14237.0    0.000364                 4450                  1712   \n",
       "...               ...         ...                  ...                   ...   \n",
       "128021537        28.0    0.013419                    4                     3   \n",
       "128021538     21760.0    0.000005                 6924                  2136   \n",
       "128021607     17424.0    0.000006                 5219                  1106   \n",
       "128021608      7426.0    0.000007                 2177                   452   \n",
       "128021609      3681.0    0.001110                 1050                   265   \n",
       "\n",
       "           health_care_and_social_assistance  \\\n",
       "area_id                                        \n",
       "101051540                                 33   \n",
       "102011028                                 60   \n",
       "102011029                                 43   \n",
       "102011030                                 12   \n",
       "102011031                                179   \n",
       "...                                      ...   \n",
       "128021537                                  0   \n",
       "128021538                                127   \n",
       "128021607                                 82   \n",
       "128021608                                 25   \n",
       "128021609                                 11   \n",
       "\n",
       "           public_administration_and_safety   land_area  population_density  \\\n",
       "area_id                                                                       \n",
       "101051540                                 3   9035.1221            1.402305   \n",
       "102011028                                 0    643.8000           11.789376   \n",
       "102011029                                 3   3208.6000            3.423923   \n",
       "102011030                                 0  76795.1000            0.063038   \n",
       "102011031                                12   3379.3000            4.213003   \n",
       "...                                     ...         ...                 ...   \n",
       "128021537                                 0  13933.4000            0.002010   \n",
       "128021538                                17    775.5000           28.059317   \n",
       "128021607                                 9    895.4000           19.459459   \n",
       "128021608                                 5    384.4000           19.318418   \n",
       "128021609                                 0    313.7000           11.734141   \n",
       "\n",
       "           dwelling_density  \n",
       "area_id                      \n",
       "101051540          0.754500  \n",
       "102011028          3.611370  \n",
       "102011029          1.198965  \n",
       "102011030          0.020509  \n",
       "102011031          1.316841  \n",
       "...                     ...  \n",
       "128021537          0.000287  \n",
       "128021538          8.928433  \n",
       "128021607          5.828680  \n",
       "128021608          5.663371  \n",
       "128021609          3.347147  \n",
       "\n",
       "[196 rows x 9 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combine_data = pd.read_sql_query(\"\"\"\n",
    "select n.area_id,n.population,CAST(\"SHAPE_AREA\"AS FLOAT),number_of_dwellings,b.number_of_businesses,\n",
    "b.health_care_and_social_assistance,b.public_administration_and_safety,n.land_area,n.population_density,n.dwelling_density\n",
    "from \"sa2rfs\" as f, neighbourhoods as n,\"business\" as b\n",
    "where CAST(\"SA2_MAIN16\" AS int)=n.area_id and CAST(\"SA2_MAIN16\" AS int)=b.area_id\n",
    "\"\"\", conn)\n",
    "combine_data.set_index('area_id', inplace=True)\n",
    "combine_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>population</th>\n",
       "      <th>SHAPE_AREA</th>\n",
       "      <th>number_of_dwellings</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>health_care_and_social_assistance</th>\n",
       "      <th>public_administration_and_safety</th>\n",
       "      <th>land_area</th>\n",
       "      <th>population_density</th>\n",
       "      <th>dwelling_density</th>\n",
       "      <th>bfls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101051540</td>\n",
       "      <td>12670.0</td>\n",
       "      <td>0.242719</td>\n",
       "      <td>6817</td>\n",
       "      <td>1891</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>9035.1221</td>\n",
       "      <td>1.402305</td>\n",
       "      <td>0.754500</td>\n",
       "      <td>1.141128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>7590.0</td>\n",
       "      <td>0.000093</td>\n",
       "      <td>2325</td>\n",
       "      <td>724</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>643.8000</td>\n",
       "      <td>11.789376</td>\n",
       "      <td>3.611370</td>\n",
       "      <td>0.000266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>10986.0</td>\n",
       "      <td>0.001989</td>\n",
       "      <td>3847</td>\n",
       "      <td>934</td>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>3208.6000</td>\n",
       "      <td>3.423923</td>\n",
       "      <td>1.198965</td>\n",
       "      <td>0.010562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>4841.0</td>\n",
       "      <td>0.012135</td>\n",
       "      <td>1575</td>\n",
       "      <td>1134</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>76795.1000</td>\n",
       "      <td>0.063038</td>\n",
       "      <td>0.020509</td>\n",
       "      <td>0.105012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>14237.0</td>\n",
       "      <td>0.000364</td>\n",
       "      <td>4450</td>\n",
       "      <td>1712</td>\n",
       "      <td>179</td>\n",
       "      <td>12</td>\n",
       "      <td>3379.3000</td>\n",
       "      <td>4.213003</td>\n",
       "      <td>1.316841</td>\n",
       "      <td>0.001336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>128021537</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.013419</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13933.4000</td>\n",
       "      <td>0.002010</td>\n",
       "      <td>0.000287</td>\n",
       "      <td>0.194093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>128021538</td>\n",
       "      <td>21760.0</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>6924</td>\n",
       "      <td>2136</td>\n",
       "      <td>127</td>\n",
       "      <td>17</td>\n",
       "      <td>775.5000</td>\n",
       "      <td>28.059317</td>\n",
       "      <td>8.928433</td>\n",
       "      <td>0.000005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>128021607</td>\n",
       "      <td>17424.0</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>5219</td>\n",
       "      <td>1106</td>\n",
       "      <td>82</td>\n",
       "      <td>9</td>\n",
       "      <td>895.4000</td>\n",
       "      <td>19.459459</td>\n",
       "      <td>5.828680</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>128021608</td>\n",
       "      <td>7426.0</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>2177</td>\n",
       "      <td>452</td>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>384.4000</td>\n",
       "      <td>19.318418</td>\n",
       "      <td>5.663371</td>\n",
       "      <td>0.000016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>128021609</td>\n",
       "      <td>3681.0</td>\n",
       "      <td>0.001110</td>\n",
       "      <td>1050</td>\n",
       "      <td>265</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>313.7000</td>\n",
       "      <td>11.734141</td>\n",
       "      <td>3.347147</td>\n",
       "      <td>0.026589</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id  population  SHAPE_AREA  number_of_dwellings  \\\n",
       "0    101051540     12670.0    0.242719                 6817   \n",
       "1    102011028      7590.0    0.000093                 2325   \n",
       "2    102011029     10986.0    0.001989                 3847   \n",
       "3    102011030      4841.0    0.012135                 1575   \n",
       "4    102011031     14237.0    0.000364                 4450   \n",
       "..         ...         ...         ...                  ...   \n",
       "191  128021537        28.0    0.013419                    4   \n",
       "192  128021538     21760.0    0.000005                 6924   \n",
       "193  128021607     17424.0    0.000006                 5219   \n",
       "194  128021608      7426.0    0.000007                 2177   \n",
       "195  128021609      3681.0    0.001110                 1050   \n",
       "\n",
       "     number_of_businesses  health_care_and_social_assistance  \\\n",
       "0                    1891                                 33   \n",
       "1                     724                                 60   \n",
       "2                     934                                 43   \n",
       "3                    1134                                 12   \n",
       "4                    1712                                179   \n",
       "..                    ...                                ...   \n",
       "191                     3                                  0   \n",
       "192                  2136                                127   \n",
       "193                  1106                                 82   \n",
       "194                   452                                 25   \n",
       "195                   265                                 11   \n",
       "\n",
       "     public_administration_and_safety   land_area  population_density  \\\n",
       "0                                   3   9035.1221            1.402305   \n",
       "1                                   0    643.8000           11.789376   \n",
       "2                                   3   3208.6000            3.423923   \n",
       "3                                   0  76795.1000            0.063038   \n",
       "4                                  12   3379.3000            4.213003   \n",
       "..                                ...         ...                 ...   \n",
       "191                                 0  13933.4000            0.002010   \n",
       "192                                17    775.5000           28.059317   \n",
       "193                                 9    895.4000           19.459459   \n",
       "194                                 5    384.4000           19.318418   \n",
       "195                                 0    313.7000           11.734141   \n",
       "\n",
       "     dwelling_density      bfls  \n",
       "0            0.754500  1.141128  \n",
       "1            3.611370  0.000266  \n",
       "2            1.198965  0.010562  \n",
       "3            0.020509  0.105012  \n",
       "4            1.316841  0.001336  \n",
       "..                ...       ...  \n",
       "191          0.000287  0.194093  \n",
       "192          8.928433  0.000005  \n",
       "193          5.828680  0.000016  \n",
       "194          5.663371  0.000016  \n",
       "195          3.347147  0.026589  \n",
       "\n",
       "[196 rows x 11 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combine_data=pd.merge(combine_data, sa2_rfs2, left_on='area_id', right_on='area_id', how='inner')\n",
    "combine_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>population</th>\n",
       "      <th>SHAPE_AREA</th>\n",
       "      <th>number_of_dwellings</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>health_care_and_social_assistance</th>\n",
       "      <th>public_administration_and_safety</th>\n",
       "      <th>land_area</th>\n",
       "      <th>population_density</th>\n",
       "      <th>dwelling_density</th>\n",
       "      <th>bfls</th>\n",
       "      <th>bfls_density</th>\n",
       "      <th>assistive_service_density</th>\n",
       "      <th>business_density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101051540</td>\n",
       "      <td>12670.0</td>\n",
       "      <td>0.242719</td>\n",
       "      <td>6817</td>\n",
       "      <td>1891</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>9035.1221</td>\n",
       "      <td>1.402305</td>\n",
       "      <td>0.754500</td>\n",
       "      <td>1.141128</td>\n",
       "      <td>1.262991e-04</td>\n",
       "      <td>0.003984</td>\n",
       "      <td>0.209294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>7590.0</td>\n",
       "      <td>0.000093</td>\n",
       "      <td>2325</td>\n",
       "      <td>724</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>643.8000</td>\n",
       "      <td>11.789376</td>\n",
       "      <td>3.611370</td>\n",
       "      <td>0.000266</td>\n",
       "      <td>4.131401e-07</td>\n",
       "      <td>0.093197</td>\n",
       "      <td>1.124573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>10986.0</td>\n",
       "      <td>0.001989</td>\n",
       "      <td>3847</td>\n",
       "      <td>934</td>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>3208.6000</td>\n",
       "      <td>3.423923</td>\n",
       "      <td>1.198965</td>\n",
       "      <td>0.010562</td>\n",
       "      <td>3.291750e-06</td>\n",
       "      <td>0.014336</td>\n",
       "      <td>0.291093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>4841.0</td>\n",
       "      <td>0.012135</td>\n",
       "      <td>1575</td>\n",
       "      <td>1134</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>76795.1000</td>\n",
       "      <td>0.063038</td>\n",
       "      <td>0.020509</td>\n",
       "      <td>0.105012</td>\n",
       "      <td>1.367426e-06</td>\n",
       "      <td>0.000156</td>\n",
       "      <td>0.014767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>14237.0</td>\n",
       "      <td>0.000364</td>\n",
       "      <td>4450</td>\n",
       "      <td>1712</td>\n",
       "      <td>179</td>\n",
       "      <td>12</td>\n",
       "      <td>3379.3000</td>\n",
       "      <td>4.213003</td>\n",
       "      <td>1.316841</td>\n",
       "      <td>0.001336</td>\n",
       "      <td>3.952314e-07</td>\n",
       "      <td>0.056521</td>\n",
       "      <td>0.506614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>128021537</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.013419</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13933.4000</td>\n",
       "      <td>0.002010</td>\n",
       "      <td>0.000287</td>\n",
       "      <td>0.194093</td>\n",
       "      <td>1.393002e-05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>128021538</td>\n",
       "      <td>21760.0</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>6924</td>\n",
       "      <td>2136</td>\n",
       "      <td>127</td>\n",
       "      <td>17</td>\n",
       "      <td>775.5000</td>\n",
       "      <td>28.059317</td>\n",
       "      <td>8.928433</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>6.331776e-09</td>\n",
       "      <td>0.185687</td>\n",
       "      <td>2.754352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>128021607</td>\n",
       "      <td>17424.0</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>5219</td>\n",
       "      <td>1106</td>\n",
       "      <td>82</td>\n",
       "      <td>9</td>\n",
       "      <td>895.4000</td>\n",
       "      <td>19.459459</td>\n",
       "      <td>5.828680</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>1.810493e-08</td>\n",
       "      <td>0.101631</td>\n",
       "      <td>1.235202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>128021608</td>\n",
       "      <td>7426.0</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>2177</td>\n",
       "      <td>452</td>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>384.4000</td>\n",
       "      <td>19.318418</td>\n",
       "      <td>5.663371</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>4.066211e-08</td>\n",
       "      <td>0.078044</td>\n",
       "      <td>1.175858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>128021609</td>\n",
       "      <td>3681.0</td>\n",
       "      <td>0.001110</td>\n",
       "      <td>1050</td>\n",
       "      <td>265</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>313.7000</td>\n",
       "      <td>11.734141</td>\n",
       "      <td>3.347147</td>\n",
       "      <td>0.026589</td>\n",
       "      <td>8.476013e-05</td>\n",
       "      <td>0.035065</td>\n",
       "      <td>0.844756</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id  population  SHAPE_AREA  number_of_dwellings  \\\n",
       "0    101051540     12670.0    0.242719                 6817   \n",
       "1    102011028      7590.0    0.000093                 2325   \n",
       "2    102011029     10986.0    0.001989                 3847   \n",
       "3    102011030      4841.0    0.012135                 1575   \n",
       "4    102011031     14237.0    0.000364                 4450   \n",
       "..         ...         ...         ...                  ...   \n",
       "191  128021537        28.0    0.013419                    4   \n",
       "192  128021538     21760.0    0.000005                 6924   \n",
       "193  128021607     17424.0    0.000006                 5219   \n",
       "194  128021608      7426.0    0.000007                 2177   \n",
       "195  128021609      3681.0    0.001110                 1050   \n",
       "\n",
       "     number_of_businesses  health_care_and_social_assistance  \\\n",
       "0                    1891                                 33   \n",
       "1                     724                                 60   \n",
       "2                     934                                 43   \n",
       "3                    1134                                 12   \n",
       "4                    1712                                179   \n",
       "..                    ...                                ...   \n",
       "191                     3                                  0   \n",
       "192                  2136                                127   \n",
       "193                  1106                                 82   \n",
       "194                   452                                 25   \n",
       "195                   265                                 11   \n",
       "\n",
       "     public_administration_and_safety   land_area  population_density  \\\n",
       "0                                   3   9035.1221            1.402305   \n",
       "1                                   0    643.8000           11.789376   \n",
       "2                                   3   3208.6000            3.423923   \n",
       "3                                   0  76795.1000            0.063038   \n",
       "4                                  12   3379.3000            4.213003   \n",
       "..                                ...         ...                 ...   \n",
       "191                                 0  13933.4000            0.002010   \n",
       "192                                17    775.5000           28.059317   \n",
       "193                                 9    895.4000           19.459459   \n",
       "194                                 5    384.4000           19.318418   \n",
       "195                                 0    313.7000           11.734141   \n",
       "\n",
       "     dwelling_density      bfls  bfls_density  assistive_service_density  \\\n",
       "0            0.754500  1.141128  1.262991e-04                   0.003984   \n",
       "1            3.611370  0.000266  4.131401e-07                   0.093197   \n",
       "2            1.198965  0.010562  3.291750e-06                   0.014336   \n",
       "3            0.020509  0.105012  1.367426e-06                   0.000156   \n",
       "4            1.316841  0.001336  3.952314e-07                   0.056521   \n",
       "..                ...       ...           ...                        ...   \n",
       "191          0.000287  0.194093  1.393002e-05                   0.000000   \n",
       "192          8.928433  0.000005  6.331776e-09                   0.185687   \n",
       "193          5.828680  0.000016  1.810493e-08                   0.101631   \n",
       "194          5.663371  0.000016  4.066211e-08                   0.078044   \n",
       "195          3.347147  0.026589  8.476013e-05                   0.035065   \n",
       "\n",
       "     business_density  \n",
       "0            0.209294  \n",
       "1            1.124573  \n",
       "2            0.291093  \n",
       "3            0.014767  \n",
       "4            0.506614  \n",
       "..                ...  \n",
       "191          0.000215  \n",
       "192          2.754352  \n",
       "193          1.235202  \n",
       "194          1.175858  \n",
       "195          0.844756  \n",
       "\n",
       "[196 rows x 14 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combine_data['bfls_density']=combine_data['bfls']/combine_data['land_area']\n",
    "combine_data['assistive_service_density']=(combine_data['health_care_and_social_assistance']+combine_data['public_administration_and_safety'])/combine_data['land_area']\n",
    "combine_data['business_density']=combine_data['number_of_businesses']/combine_data['land_area']\n",
    "combine_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def zscore(x):\n",
    "    return (x-np.mean(x))/x.std()\n",
    "def sigmoid(x):\n",
    "    return 1 / (1 + math.exp(-x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "fire_score=1/(1 + np.exp(-(zscore(combine_data['population_density'])+zscore(combine_data['dwelling_density'])+zscore(combine_data['business_density'])+zscore(combine_data['bfls_density'])-zscore(combine_data['assistive_service_density']))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>population</th>\n",
       "      <th>SHAPE_AREA</th>\n",
       "      <th>number_of_dwellings</th>\n",
       "      <th>number_of_businesses</th>\n",
       "      <th>health_care_and_social_assistance</th>\n",
       "      <th>public_administration_and_safety</th>\n",
       "      <th>land_area</th>\n",
       "      <th>population_density</th>\n",
       "      <th>dwelling_density</th>\n",
       "      <th>bfls</th>\n",
       "      <th>bfls_density</th>\n",
       "      <th>assistive_service_density</th>\n",
       "      <th>business_density</th>\n",
       "      <th>fire_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101051540</td>\n",
       "      <td>12670.0</td>\n",
       "      <td>0.242719</td>\n",
       "      <td>6817</td>\n",
       "      <td>1891</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>9035.1221</td>\n",
       "      <td>1.402305</td>\n",
       "      <td>0.754500</td>\n",
       "      <td>1.141128</td>\n",
       "      <td>1.262991e-04</td>\n",
       "      <td>0.003984</td>\n",
       "      <td>0.209294</td>\n",
       "      <td>0.545611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>7590.0</td>\n",
       "      <td>0.000093</td>\n",
       "      <td>2325</td>\n",
       "      <td>724</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>643.8000</td>\n",
       "      <td>11.789376</td>\n",
       "      <td>3.611370</td>\n",
       "      <td>0.000266</td>\n",
       "      <td>4.131401e-07</td>\n",
       "      <td>0.093197</td>\n",
       "      <td>1.124573</td>\n",
       "      <td>0.288775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>10986.0</td>\n",
       "      <td>0.001989</td>\n",
       "      <td>3847</td>\n",
       "      <td>934</td>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>3208.6000</td>\n",
       "      <td>3.423923</td>\n",
       "      <td>1.198965</td>\n",
       "      <td>0.010562</td>\n",
       "      <td>3.291750e-06</td>\n",
       "      <td>0.014336</td>\n",
       "      <td>0.291093</td>\n",
       "      <td>0.139963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>4841.0</td>\n",
       "      <td>0.012135</td>\n",
       "      <td>1575</td>\n",
       "      <td>1134</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>76795.1000</td>\n",
       "      <td>0.063038</td>\n",
       "      <td>0.020509</td>\n",
       "      <td>0.105012</td>\n",
       "      <td>1.367426e-06</td>\n",
       "      <td>0.000156</td>\n",
       "      <td>0.014767</td>\n",
       "      <td>0.086765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>14237.0</td>\n",
       "      <td>0.000364</td>\n",
       "      <td>4450</td>\n",
       "      <td>1712</td>\n",
       "      <td>179</td>\n",
       "      <td>12</td>\n",
       "      <td>3379.3000</td>\n",
       "      <td>4.213003</td>\n",
       "      <td>1.316841</td>\n",
       "      <td>0.001336</td>\n",
       "      <td>3.952314e-07</td>\n",
       "      <td>0.056521</td>\n",
       "      <td>0.506614</td>\n",
       "      <td>0.125936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>128021537</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.013419</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13933.4000</td>\n",
       "      <td>0.002010</td>\n",
       "      <td>0.000287</td>\n",
       "      <td>0.194093</td>\n",
       "      <td>1.393002e-05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000215</td>\n",
       "      <td>0.104842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>128021538</td>\n",
       "      <td>21760.0</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>6924</td>\n",
       "      <td>2136</td>\n",
       "      <td>127</td>\n",
       "      <td>17</td>\n",
       "      <td>775.5000</td>\n",
       "      <td>28.059317</td>\n",
       "      <td>8.928433</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>6.331776e-09</td>\n",
       "      <td>0.185687</td>\n",
       "      <td>2.754352</td>\n",
       "      <td>0.813142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>128021607</td>\n",
       "      <td>17424.0</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>5219</td>\n",
       "      <td>1106</td>\n",
       "      <td>82</td>\n",
       "      <td>9</td>\n",
       "      <td>895.4000</td>\n",
       "      <td>19.459459</td>\n",
       "      <td>5.828680</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>1.810493e-08</td>\n",
       "      <td>0.101631</td>\n",
       "      <td>1.235202</td>\n",
       "      <td>0.503641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>128021608</td>\n",
       "      <td>7426.0</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>2177</td>\n",
       "      <td>452</td>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>384.4000</td>\n",
       "      <td>19.318418</td>\n",
       "      <td>5.663371</td>\n",
       "      <td>0.000016</td>\n",
       "      <td>4.066211e-08</td>\n",
       "      <td>0.078044</td>\n",
       "      <td>1.175858</td>\n",
       "      <td>0.522155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>128021609</td>\n",
       "      <td>3681.0</td>\n",
       "      <td>0.001110</td>\n",
       "      <td>1050</td>\n",
       "      <td>265</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>313.7000</td>\n",
       "      <td>11.734141</td>\n",
       "      <td>3.347147</td>\n",
       "      <td>0.026589</td>\n",
       "      <td>8.476013e-05</td>\n",
       "      <td>0.035065</td>\n",
       "      <td>0.844756</td>\n",
       "      <td>0.680688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id  population  SHAPE_AREA  number_of_dwellings  \\\n",
       "0    101051540     12670.0    0.242719                 6817   \n",
       "1    102011028      7590.0    0.000093                 2325   \n",
       "2    102011029     10986.0    0.001989                 3847   \n",
       "3    102011030      4841.0    0.012135                 1575   \n",
       "4    102011031     14237.0    0.000364                 4450   \n",
       "..         ...         ...         ...                  ...   \n",
       "191  128021537        28.0    0.013419                    4   \n",
       "192  128021538     21760.0    0.000005                 6924   \n",
       "193  128021607     17424.0    0.000006                 5219   \n",
       "194  128021608      7426.0    0.000007                 2177   \n",
       "195  128021609      3681.0    0.001110                 1050   \n",
       "\n",
       "     number_of_businesses  health_care_and_social_assistance  \\\n",
       "0                    1891                                 33   \n",
       "1                     724                                 60   \n",
       "2                     934                                 43   \n",
       "3                    1134                                 12   \n",
       "4                    1712                                179   \n",
       "..                    ...                                ...   \n",
       "191                     3                                  0   \n",
       "192                  2136                                127   \n",
       "193                  1106                                 82   \n",
       "194                   452                                 25   \n",
       "195                   265                                 11   \n",
       "\n",
       "     public_administration_and_safety   land_area  population_density  \\\n",
       "0                                   3   9035.1221            1.402305   \n",
       "1                                   0    643.8000           11.789376   \n",
       "2                                   3   3208.6000            3.423923   \n",
       "3                                   0  76795.1000            0.063038   \n",
       "4                                  12   3379.3000            4.213003   \n",
       "..                                ...         ...                 ...   \n",
       "191                                 0  13933.4000            0.002010   \n",
       "192                                17    775.5000           28.059317   \n",
       "193                                 9    895.4000           19.459459   \n",
       "194                                 5    384.4000           19.318418   \n",
       "195                                 0    313.7000           11.734141   \n",
       "\n",
       "     dwelling_density      bfls  bfls_density  assistive_service_density  \\\n",
       "0            0.754500  1.141128  1.262991e-04                   0.003984   \n",
       "1            3.611370  0.000266  4.131401e-07                   0.093197   \n",
       "2            1.198965  0.010562  3.291750e-06                   0.014336   \n",
       "3            0.020509  0.105012  1.367426e-06                   0.000156   \n",
       "4            1.316841  0.001336  3.952314e-07                   0.056521   \n",
       "..                ...       ...           ...                        ...   \n",
       "191          0.000287  0.194093  1.393002e-05                   0.000000   \n",
       "192          8.928433  0.000005  6.331776e-09                   0.185687   \n",
       "193          5.828680  0.000016  1.810493e-08                   0.101631   \n",
       "194          5.663371  0.000016  4.066211e-08                   0.078044   \n",
       "195          3.347147  0.026589  8.476013e-05                   0.035065   \n",
       "\n",
       "     business_density  fire_score  \n",
       "0            0.209294    0.545611  \n",
       "1            1.124573    0.288775  \n",
       "2            0.291093    0.139963  \n",
       "3            0.014767    0.086765  \n",
       "4            0.506614    0.125936  \n",
       "..                ...         ...  \n",
       "191          0.000215    0.104842  \n",
       "192          2.754352    0.813142  \n",
       "193          1.235202    0.503641  \n",
       "194          1.175858    0.522155  \n",
       "195          0.844756    0.680688  \n",
       "\n",
       "[196 rows x 15 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combine_data['fire_score']=fire_score\n",
    "combine_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fire_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>area_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>101051540</th>\n",
       "      <td>0.545611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011028</th>\n",
       "      <td>0.288775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011029</th>\n",
       "      <td>0.139963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011030</th>\n",
       "      <td>0.086765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102011031</th>\n",
       "      <td>0.125936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021537</th>\n",
       "      <td>0.104842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021538</th>\n",
       "      <td>0.813142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021607</th>\n",
       "      <td>0.503641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021608</th>\n",
       "      <td>0.522155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128021609</th>\n",
       "      <td>0.680688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           fire_score\n",
       "area_id              \n",
       "101051540    0.545611\n",
       "102011028    0.288775\n",
       "102011029    0.139963\n",
       "102011030    0.086765\n",
       "102011031    0.125936\n",
       "...               ...\n",
       "128021537    0.104842\n",
       "128021538    0.813142\n",
       "128021607    0.503641\n",
       "128021608    0.522155\n",
       "128021609    0.680688\n",
       "\n",
       "[196 rows x 1 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fire_risk=combine_data.drop(columns = ['population','SHAPE_AREA','number_of_dwellings','number_of_businesses','health_care_and_social_assistance','public_administration_and_safety','land_area','population_density','dwelling_density','bfls','bfls_density','assistive_service_density','business_density'])\n",
    "fire_risk.set_index('area_id', inplace=True)\n",
    "fire_risk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x167cc324040>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS FIRE_RISK\")\n",
    "fire_risk_schema = \"\"\"CREATE TABLE IF NOT EXISTS FIRE_RISK (\n",
    "                         fire_score FLOAT, \n",
    "                         area_id INTEGER PRIMARY KEY\n",
    "                                                                    \n",
    "                   )\"\"\"\n",
    "conn.execute(fire_risk_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "fire_risk.to_sql(\"fire_risk\",con=conn,if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>fire_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101051540</td>\n",
       "      <td>0.545611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>102011028</td>\n",
       "      <td>0.288775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011029</td>\n",
       "      <td>0.139963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102011030</td>\n",
       "      <td>0.086765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102011031</td>\n",
       "      <td>0.125936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>128021537</td>\n",
       "      <td>0.104842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>128021538</td>\n",
       "      <td>0.813142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>128021607</td>\n",
       "      <td>0.503641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>128021608</td>\n",
       "      <td>0.522155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>128021609</td>\n",
       "      <td>0.680688</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>196 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id  fire_score\n",
       "0    101051540    0.545611\n",
       "1    102011028    0.288775\n",
       "2    102011029    0.139963\n",
       "3    102011030    0.086765\n",
       "4    102011031    0.125936\n",
       "..         ...         ...\n",
       "191  128021537    0.104842\n",
       "192  128021538    0.813142\n",
       "193  128021607    0.503641\n",
       "194  128021608    0.522155\n",
       "195  128021609    0.680688\n",
       "\n",
       "[196 rows x 2 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"SELECT * FROM fire_risk\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlalchemy.engine.result.ResultProxy at 0x167cc391250>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.execute(\"DROP TABLE IF EXISTS arrang\")\n",
    "arrang_schema = \"\"\"CREATE TABLE IF NOT EXISTS FIRE_RISK (\n",
    "                         area_id INTEGER PRIMARY KEY,\n",
    "                         fire_riskscore\t FLOAT,\n",
    "                         area_name VARCHAR(100)\n",
    "                   )\"\"\"\n",
    "conn.execute(arrang_schema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "correlation = pd.read_sql_query(\"\"\"\n",
    "select f.area_id,fire_score as fire_riskScore,n.median_annual_household_income,n.avg_monthly_rent\n",
    "from fire_risk as f,neighbourhoods as n\n",
    "where f.area_id=n.area_id\n",
    "\"\"\", conn)\n",
    "correlation = correlation.dropna()\n",
    "correlation.set_index('area_id', inplace=True)\n",
    "\n",
    "arrang = pd.read_sql_query(\"\"\"\n",
    "select f.area_id,fire_score as fire_riskScore,n.area_name\n",
    "from fire_risk as f,neighbourhoods as n\n",
    "where f.area_id=n.area_id\n",
    "order by fire_riskScore\n",
    "\"\"\", conn)\n",
    "#arrang.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "arrang.set_index('area_id', inplace=True)\n",
    "arrang.dropna().to_sql(\"arrang\",con=conn,if_exists='append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_id</th>\n",
       "      <th>fire_riskscore</th>\n",
       "      <th>area_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>102021049</td>\n",
       "      <td>0.085142</td>\n",
       "      <td>Jilliby - Yarramalong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>127011592</td>\n",
       "      <td>0.085232</td>\n",
       "      <td>Badgerys Creek</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>102011030</td>\n",
       "      <td>0.086765</td>\n",
       "      <td>Calga - Kulnura</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>102021051</td>\n",
       "      <td>0.087744</td>\n",
       "      <td>Ourimbah - Fountaindale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>115021298</td>\n",
       "      <td>0.087981</td>\n",
       "      <td>Galston - Laughtondale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>121041414</td>\n",
       "      <td>0.996510</td>\n",
       "      <td>Crows Nest - Waverton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>122031426</td>\n",
       "      <td>0.998761</td>\n",
       "      <td>Dee Why - North Curl Curl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>111021218</td>\n",
       "      <td>0.998804</td>\n",
       "      <td>Morisset - Cooranbong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>106011109</td>\n",
       "      <td>0.999971</td>\n",
       "      <td>Cessnock Region</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>103031070</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Lithgow</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       area_id  fire_riskscore                  area_name\n",
       "0    102021049        0.085142      Jilliby - Yarramalong\n",
       "1    127011592        0.085232             Badgerys Creek\n",
       "2    102011030        0.086765            Calga - Kulnura\n",
       "3    102021051        0.087744    Ourimbah - Fountaindale\n",
       "4    115021298        0.087981     Galston - Laughtondale\n",
       "..         ...             ...                        ...\n",
       "190  121041414        0.996510      Crows Nest - Waverton\n",
       "191  122031426        0.998761  Dee Why - North Curl Curl\n",
       "192  111021218        0.998804      Morisset - Cooranbong\n",
       "193  106011109        0.999971            Cessnock Region\n",
       "194  103031070        1.000000                    Lithgow\n",
       "\n",
       "[195 rows x 3 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_sql_query(\"SELECT * FROM arrang\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Tighes Hill',\n",
       " 'Parramatta',\n",
       " 'Centennial Park',\n",
       " 'Various',\n",
       " 'Alexandria',\n",
       " 'Waterloo',\n",
       " 'Glebe',\n",
       " 'Zetland',\n",
       " 'Bella Vista',\n",
       " 'Arncliffe',\n",
       " 'Dubbo',\n",
       " 'Glenmore Park',\n",
       " 'Cammeray',\n",
       " 'Narellan',\n",
       " 'Narrabri',\n",
       " 'Old Guildford',\n",
       " 'Rutherford',\n",
       " 'Wentworth Point',\n",
       " 'Ballina',\n",
       " 'Various',\n",
       " 'Lambton',\n",
       " 'Maryland',\n",
       " 'Tregear',\n",
       " 'Rutherford',\n",
       " 'South Windsor',\n",
       " 'Auburn',\n",
       " 'Randwick',\n",
       " 'Castle Hill',\n",
       " 'Balmain',\n",
       " 'Sydney',\n",
       " 'Kingswood',\n",
       " 'Kingswood',\n",
       " 'Sydney Olympic Park',\n",
       " 'Various',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Darlinghurst',\n",
       " 'Darlinghurst',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Centennial Park',\n",
       " 'Centennial Park',\n",
       " 'Centennial Park',\n",
       " 'Sydney',\n",
       " 'Artarmon',\n",
       " 'Bardia',\n",
       " 'Bellevue Hill',\n",
       " 'Surry Hills',\n",
       " 'Bowral',\n",
       " 'Brewarrina',\n",
       " 'Cherrybrook',\n",
       " 'Bathurst',\n",
       " 'Freshwater',\n",
       " 'Homebush West',\n",
       " 'Gateshead',\n",
       " 'Canada Bay',\n",
       " 'Manly Vale',\n",
       " 'Moree',\n",
       " 'Lane Cove North',\n",
       " 'Crows Nest',\n",
       " 'Point Clare',\n",
       " 'Randwick',\n",
       " 'Randwick',\n",
       " 'Spring Farm',\n",
       " 'Ultimo',\n",
       " 'Walgett',\n",
       " 'Wilton',\n",
       " 'Yeoval',\n",
       " 'Bethungra',\n",
       " 'Tibooburra',\n",
       " 'Londonderry',\n",
       " 'Sydney',\n",
       " 'Newcastle',\n",
       " 'Parklea',\n",
       " 'Wagga Wagga',\n",
       " 'Sydney',\n",
       " 'Wollongong',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Abermain',\n",
       " 'Mount Druitt',\n",
       " 'Wingham',\n",
       " 'Wollongong',\n",
       " 'Castle Hill',\n",
       " 'Various',\n",
       " 'Sydney',\n",
       " 'Armidale',\n",
       " 'Ballina',\n",
       " 'Blacktown',\n",
       " 'Blacktown',\n",
       " 'Blacktown',\n",
       " 'Blacktown',\n",
       " 'Bowral',\n",
       " 'Broken Hill',\n",
       " 'Bulli',\n",
       " 'Bulli',\n",
       " 'Ewingsdale',\n",
       " 'Campbelltown',\n",
       " 'Campbelltown',\n",
       " 'Coffs Harbour',\n",
       " 'Coraki',\n",
       " 'Dubbo',\n",
       " 'Moruya',\n",
       " 'Gosford',\n",
       " 'Grafton',\n",
       " 'Gulgong',\n",
       " 'Ivanhoe',\n",
       " 'Hillston',\n",
       " 'Hornsby',\n",
       " 'Shellharbour',\n",
       " 'New Lambton Heights',\n",
       " 'New Lambton Heights',\n",
       " 'Kempsey',\n",
       " 'Kempsey',\n",
       " 'Lismore',\n",
       " 'Lismore',\n",
       " 'Lismore',\n",
       " 'Malabar',\n",
       " 'Long Jetty',\n",
       " 'Macksville',\n",
       " 'Taree',\n",
       " 'Camperdown',\n",
       " 'Muswellbrook',\n",
       " 'Maitland',\n",
       " 'Newcastle',\n",
       " 'Frenchs Forest',\n",
       " 'Orange',\n",
       " 'Various',\n",
       " 'Peak Hill',\n",
       " 'Port Macquarie',\n",
       " 'St Leonards',\n",
       " 'St Leonards',\n",
       " 'St Leonards',\n",
       " 'Ryde',\n",
       " 'Bega',\n",
       " 'Kogarah',\n",
       " 'Kogarah',\n",
       " 'Darlinghurst',\n",
       " 'North Sydney',\n",
       " 'Caringbah',\n",
       " 'Caringbah',\n",
       " 'Tamworth',\n",
       " 'Wagga Wagga',\n",
       " 'Westmead',\n",
       " 'Westmead',\n",
       " 'Westmead',\n",
       " 'Wollongong',\n",
       " 'Wollongong',\n",
       " 'Castle Hill',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Deniliquin',\n",
       " 'Liverpool',\n",
       " 'Moss Vale',\n",
       " 'Riverstone',\n",
       " 'Tweed Heads',\n",
       " 'Walgett',\n",
       " 'Sydney',\n",
       " 'Newcastle',\n",
       " 'Sydney',\n",
       " 'Perisher Valley',\n",
       " 'Coonabarabran',\n",
       " 'Wollongong',\n",
       " 'Balmain',\n",
       " 'Sydney',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Gunnedah',\n",
       " 'Bemboka',\n",
       " 'West Gosford - Narara',\n",
       " 'Lisarow - Ourimbah',\n",
       " 'Lisarow',\n",
       " 'Tuggerah',\n",
       " 'Wyong',\n",
       " 'Various',\n",
       " 'Terrigal',\n",
       " 'Watanobbi',\n",
       " 'Chittaway Bay',\n",
       " 'Tumbi Umbi',\n",
       " 'Various',\n",
       " 'Sandy Point',\n",
       " 'Mona Vale',\n",
       " 'Ingleside',\n",
       " 'Penrith',\n",
       " 'Frenchs Forest',\n",
       " 'Prospect',\n",
       " 'Castle Hill',\n",
       " 'Windsor',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Bullaburra',\n",
       " 'Hartley',\n",
       " 'Kelso',\n",
       " 'Muswellbrook',\n",
       " 'Scone',\n",
       " 'Singleton',\n",
       " 'Maitland',\n",
       " 'Lambton',\n",
       " 'Hexham',\n",
       " 'Various',\n",
       " 'Coffs Harbour',\n",
       " 'Clybucca',\n",
       " 'Urunga',\n",
       " 'Port Macquarie, Kempsey',\n",
       " 'Bangalow',\n",
       " 'Macksville',\n",
       " 'Macksville',\n",
       " 'Yallah - Oak Flats',\n",
       " 'Berry - Bomaderry',\n",
       " 'Burrill Lake',\n",
       " 'Gerringong',\n",
       " 'Cataract',\n",
       " 'Mount Ousley',\n",
       " 'Termeil',\n",
       " 'Gundagai - Tumut',\n",
       " 'Nelligen',\n",
       " 'Cooma - Jindabyne',\n",
       " 'Tuena',\n",
       " 'Molong',\n",
       " 'Williamsdale - Cooma',\n",
       " 'Parkes',\n",
       " 'Port Macquarie',\n",
       " 'Tamworth',\n",
       " 'Lake Hume Village',\n",
       " 'Grafton',\n",
       " 'Mascot',\n",
       " 'Mascot',\n",
       " 'Arncliffe',\n",
       " 'Various',\n",
       " 'Vineyard',\n",
       " 'Leppington',\n",
       " 'Kellyville',\n",
       " 'Marsden Park',\n",
       " 'Schofields',\n",
       " 'Horsley Park',\n",
       " 'Leppington',\n",
       " 'Penrith, Glenmore Park',\n",
       " 'Oran Park',\n",
       " 'Luddenham',\n",
       " 'Bringelly',\n",
       " 'Claremont Meadows',\n",
       " 'Badgerys Creek',\n",
       " 'Mount Tomah',\n",
       " 'Mount Tomah',\n",
       " 'Sydney',\n",
       " 'Camden',\n",
       " 'Newcastle',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Moore Park',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'The Ponds',\n",
       " 'Alexandria',\n",
       " 'Bargo',\n",
       " 'Buxton',\n",
       " 'Douglas Park',\n",
       " 'Galston',\n",
       " 'Glenorie',\n",
       " 'Tighes Hill',\n",
       " 'Mudgee',\n",
       " 'Kingswood',\n",
       " 'Kingswood',\n",
       " 'Coffs Harbour',\n",
       " 'St Leonards',\n",
       " 'Ryde',\n",
       " 'Wetherill Park',\n",
       " 'Taree',\n",
       " 'Ultimo',\n",
       " 'Ultimo',\n",
       " 'Wetherill Park',\n",
       " 'Young',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Sydney',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Parramatta',\n",
       " 'Various',\n",
       " 'Yass',\n",
       " 'Tamworth',\n",
       " 'Bowling Alley Point',\n",
       " 'Wellington',\n",
       " 'Inverell',\n",
       " 'Gunnedah',\n",
       " 'Cowra',\n",
       " 'Keepit',\n",
       " 'Hillston',\n",
       " 'Menindee',\n",
       " 'Warren',\n",
       " 'Prospect',\n",
       " 'Warragamba',\n",
       " 'Wyangala',\n",
       " 'Various',\n",
       " 'Eastern Creek',\n",
       " 'Eastern Creek',\n",
       " 'Horsley Park',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Various',\n",
       " 'Mosman',\n",
       " 'Mosman',\n",
       " 'Dubbo',\n",
       " 'Mosman',\n",
       " 'Dubbo']"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "location_list=[]\n",
    "for location in own_buget_data['Location']:\n",
    "    location_list.append(location)\n",
    "location_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0.08514198471096238, 'Jilliby - Yarramalong'],\n",
       " [0.08523231416433051, 'Badgerys Creek'],\n",
       " [0.08676497499486104, 'Calga - Kulnura'],\n",
       " [0.08774421883039939, 'Ourimbah - Fountaindale'],\n",
       " [0.0879810174556316, 'Galston - Laughtondale'],\n",
       " [0.08823541616878317, 'Douglas Park - Appin'],\n",
       " [0.0895728148256591, 'Blackheath - Megalong Valley'],\n",
       " [0.09035274154360033, 'Blue Mountains - North'],\n",
       " [0.09099974572267848, 'The Oaks - Oakdale'],\n",
       " [0.09191810057919497, 'Bilpin - Colo - St Albans'],\n",
       " [0.09264577367587325, 'Blue Mountains - South'],\n",
       " [0.09353095719023448, 'Prospect Reservoir'],\n",
       " [0.09484849390091091, 'Picton - Tahmoor - Buxton'],\n",
       " [0.0950865253724703, 'Bargo'],\n",
       " [0.09594004537666061, 'Warragamba - Silverdale'],\n",
       " [0.09762570061159713, 'Austral - Greendale'],\n",
       " [0.09809428261735186, 'Kurrajong Heights - Ebenezer'],\n",
       " [0.09835759801861273, 'Horsley Park - Kemps Creek'],\n",
       " [0.09841628018267817, 'Terrey Hills - Duffys Forest'],\n",
       " [0.10033381000179072, 'Mulgoa - Luddenham - Orchard Hills'],\n",
       " [0.10335382100041272, 'Dural - Kenthurst - Wisemans Ferry'],\n",
       " [0.10484233342248603, 'Royal National Park'],\n",
       " [0.10609809228529413, 'Yarramundi - Londonderry'],\n",
       " [0.10642287459079733, 'Richmond - Clarendon'],\n",
       " [0.10649307686754031, 'Pitt Town - McGraths Hill'],\n",
       " [0.10651065596206916, 'Cobbitty - Leppington'],\n",
       " [0.11380715182444952, 'Tuggerah - Kangy Angy'],\n",
       " [0.11416980218482593, 'Heathcote - Waterfall'],\n",
       " [0.11521960466548453, 'Lawson - Hazelbrook - Linden'],\n",
       " [0.11857481182866059, 'Riverstone - Marsden Park'],\n",
       " [0.12006965932019989, 'Wentworth Falls'],\n",
       " [0.12301040454234274, 'Berowra - Brooklyn - Cowan'],\n",
       " [0.12307421763570049, 'Springwood - Winmalee'],\n",
       " [0.12593635681922632, 'Erina - Green Point'],\n",
       " [0.1276213840758395, 'Katoomba - Leura'],\n",
       " [0.1292568767281413, 'Holsworthy - Wattle Grove'],\n",
       " [0.13340459417337916, 'Warnervale - Wadalba'],\n",
       " [0.13469874836886486, 'Bayview - Elanora Heights'],\n",
       " [0.13632208809211427, 'Lake Munmorah - Mannering Park'],\n",
       " [0.13860801381904808, 'Rosemeadow - Glen Alpine'],\n",
       " [0.13992237208047373, 'Castlereagh - Cranebrook'],\n",
       " [0.139963116977185, 'Box Head - MacMasters Beach'],\n",
       " [0.14986378010683246, 'Niagara Park - Lisarow'],\n",
       " [0.15105030322253396, 'Kincumber - Picketts Valley'],\n",
       " [0.1523173193515945, 'Bradbury - Wedderburn'],\n",
       " [0.15236019715182617, 'Camden - Ellis Lane'],\n",
       " [0.16308767886470427, 'Blue Haven - San Remo'],\n",
       " [0.1661116537477506, 'Asquith - Mount Colah'],\n",
       " [0.173011863302157, 'Blaxland - Warrimoo - Lapstone'],\n",
       " [0.18053634904561594, 'Wamberal - Forresters Beach'],\n",
       " [0.18170997808190345, 'Rouse Hill - Beaumont Hills'],\n",
       " [0.1827212327207677, 'Wyong'],\n",
       " [0.18525876553327894, 'Menai - Lucas Heights - Woronora'],\n",
       " [0.18695492746725773, 'Leumeah - Minto Heights'],\n",
       " [0.190807412639327, 'Ingleburn - Denham Court'],\n",
       " [0.1910010474064114, 'Windsor - Bligh Park'],\n",
       " [0.1917965156093152, 'Wetherill Park Industrial'],\n",
       " [0.19241228083456144, 'Summerland Point - Gwandalan'],\n",
       " [0.20014889966358115, 'Glenhaven'],\n",
       " [0.20390883717418337, 'Kariong'],\n",
       " [0.21056304539970105, 'Erskine Park'],\n",
       " [0.22649778503818763, 'Claymore - Eagle Vale - Raby'],\n",
       " [0.2316580870029779, 'Chittaway Bay - Tumbi Umbi'],\n",
       " [0.23354059085226983, 'Wahroonga (East) - Warrawee'],\n",
       " [0.2363049373623865, 'Point Clare - Koolewong'],\n",
       " [0.2403074005888755, 'Gosford - Springfield'],\n",
       " [0.2403543310693993, 'Toukley - Norah Head'],\n",
       " [0.2446346240100838, 'Woy Woy - Blackwall'],\n",
       " [0.2473163817461129, 'Campbelltown - Woodbine'],\n",
       " [0.251457559407002, 'Umina - Booker Bay - Patonga'],\n",
       " [0.2591252859210245, 'Penrith'],\n",
       " [0.27126426933702186, 'Elderslie - Harrington Park'],\n",
       " [0.2752773577874473, 'St Ives'],\n",
       " [0.2766529100547245, 'Turramurra'],\n",
       " [0.2860348269039204, 'Emu Plains - Leonay'],\n",
       " [0.28699757490504085, 'Terrigal - North Avoca'],\n",
       " [0.28877537357208133, 'Avoca Beach - Copacabana'],\n",
       " [0.2907201148437675, 'The Entrance'],\n",
       " [0.29334173605932984, 'Frenchs Forest - Belrose'],\n",
       " [0.30523544051705975, 'Budgewoi - Buff Point - Halekulani'],\n",
       " [0.30900702921112594, 'Pennant Hills - Cheltenham'],\n",
       " [0.3090219582028207, 'Mount Annan - Currans Hill'],\n",
       " [0.30950910407232013, 'Wyoming'],\n",
       " [0.3139002149246546, 'Kingswood - Werrington'],\n",
       " [0.3184837417405591, 'Cronulla - Kurnell - Bundeena'],\n",
       " [0.3350474678594674, 'Cromer'],\n",
       " [0.3353406782510925, 'Pymble'],\n",
       " [0.3514034375670883, 'Prestons - Edmondson Park'],\n",
       " [0.35241647315888613, 'Macquarie Fields - Glenfield'],\n",
       " [0.35856297035517026, 'St Marys - North St Marys'],\n",
       " [0.3693247874523536, 'Rooty Hill - Minchinbury'],\n",
       " [0.3967215334342502, 'Gordon - Killara'],\n",
       " [0.39850987826963397, 'Illawong - Alfords Point'],\n",
       " [0.40189485989819884, 'West Pennant Hills'],\n",
       " [0.4084535479966859, 'Forestville - Killarney Heights'],\n",
       " [0.4119421540945455, 'Baulkham Hills (West) - Bella Vista'],\n",
       " [0.41267935218607776, 'Castle Hill - North'],\n",
       " [0.41414892890391775, 'North Rocks'],\n",
       " [0.41556559149995287, 'Warwick Farm'],\n",
       " [0.4164232313259484, 'Chipping Norton - Moorebank'],\n",
       " [0.4232839557607039, 'Narara'],\n",
       " [0.43512615585839826, 'Lindfield - Roseville'],\n",
       " [0.4445297604352417, 'West Hoxton - Middleton Grange'],\n",
       " [0.46166126098917537, 'Minto - St Andrews'],\n",
       " [0.4652652530672864, 'Saratoga - Davistown'],\n",
       " [0.46986645171667457, 'Hornsby - West'],\n",
       " [0.4742939246700535, 'Panania - Milperra - Picnic Point'],\n",
       " [0.5036405132474326, 'Engadine'],\n",
       " [0.5038421558810983, 'Lethbridge Park - Tregear'],\n",
       " [0.515416028325116, 'Cecil Hills'],\n",
       " [0.5221551330221306, 'Loftus - Yarrawarrah'],\n",
       " [0.5228135583449662, 'North Ryde - East Ryde'],\n",
       " [0.5249423406564665, 'Avalon - Palm Beach'],\n",
       " [0.5408957340289746, 'Normanhurst - Thornleigh - Westleigh'],\n",
       " [0.5437567028875993, 'Manly Vale - Allambie Heights'],\n",
       " [0.5456105981263086, 'Goulburn Region'],\n",
       " [0.5470565658071992, 'Casula'],\n",
       " [0.5490220577386784, 'Hunters Hill - Woolwich'],\n",
       " [0.5602686819306781, 'Bathurst Region'],\n",
       " [0.5619863528469157, 'Castle Hill - South'],\n",
       " [0.5628184207652516, 'Kellyville'],\n",
       " [0.5651626199666888, 'Gorokan - Kanwal - Charmhaven'],\n",
       " [0.572207682474519, 'Bossley Park - Abbotsbury'],\n",
       " [0.5761985278534749, 'Cherrybrook'],\n",
       " [0.5869872955025399, 'Bateau Bay - Killarney Vale'],\n",
       " [0.5928453137618955, 'Castle Hill - East'],\n",
       " [0.6053500520527432, 'Macquarie Park - Marsfield'],\n",
       " [0.6132149720016694, 'Jamisontown - South Penrith'],\n",
       " [0.6173946173166144, 'Seven Hills - Toongabbie'],\n",
       " [0.6224853204021237, 'Doonside - Woodcroft'],\n",
       " [0.6431769487186406, 'Hinchinbrook'],\n",
       " [0.6469754105687243, 'Greenfield Park - Prairiewood'],\n",
       " [0.6524023174081013, 'Glenmore Park - Regentville'],\n",
       " [0.6546252118519242, 'Mount Druitt - Whalan'],\n",
       " [0.6553459760510456, 'Lane Cove - Greenwich'],\n",
       " [0.663517337755605, 'Warriewood - Mona Vale'],\n",
       " [0.6799820518256184, 'Bass Hill - Georges Hall'],\n",
       " [0.6806877854756449, 'Woronora Heights'],\n",
       " [0.684878624272174, 'Oyster Bay - Como - Jannali'],\n",
       " [0.6986022433037364, 'Colyton - Oxley Park'],\n",
       " [0.708700266201438, 'Willoughby - Castle Cove - Northbridge'],\n",
       " [0.7089772194994597, 'Singleton Region'],\n",
       " [0.7093176210799713, 'Cambridge Park'],\n",
       " [0.7289100828847574, 'Oberon'],\n",
       " [0.7295214398663351, 'Miranda - Yowie Bay'],\n",
       " [0.7344804861212786, 'Eastwood - Denistone'],\n",
       " [0.7368902628237176, 'Lalor Park - Kings Langley'],\n",
       " [0.7377095850433183, 'Woolaware - Burraneer'],\n",
       " [0.7570910583897398, 'Padstow'],\n",
       " [0.7620129811593489, 'Carlingford'],\n",
       " [0.7656789421575229, 'Baulkham Hills (East)'],\n",
       " [0.7727030480586639, 'Hoxton Park - Carnes Hill - Horningsea Park'],\n",
       " [0.7800109138009774, 'Lithgow Region'],\n",
       " [0.782871387083788, 'Epping - North Epping'],\n",
       " [0.7842647148963342, 'Newport - Bilgola'],\n",
       " [0.7865586174625531, 'Cabramatta - Lansvale'],\n",
       " [0.791341682449292, 'Balgowlah - Clontarf - Seaforth'],\n",
       " [0.7959708271474423, 'Oatley - Hurstville Grove'],\n",
       " [0.7977630185928016, 'St Clair'],\n",
       " [0.7991747619328164, 'Ashcroft - Busby - Miller'],\n",
       " [0.8004394163530518, 'Revesby'],\n",
       " [0.8035938168854179, 'Smithfield - Wetherill Park'],\n",
       " [0.8128885448398817, 'Peakhurst - Lugarno'],\n",
       " [0.8131416425958122, 'Sutherland - Kirrawee'],\n",
       " [0.8169440147550014, 'Bonnyrigg Heights - Bonnyrigg'],\n",
       " [0.8226077928674524, 'Parklea - Kellyville Ridge'],\n",
       " [0.8271361170103187, 'Caringbah South'],\n",
       " [0.8315622823875363, 'Cabramatta West - Mount Pritchard'],\n",
       " [0.8513774322541605, 'Hassall Grove - Plumpton'],\n",
       " [0.8514461948524183, 'Gymea - Grays Point'],\n",
       " [0.8520864303800404, 'Lurnea - Cartwright'],\n",
       " [0.8671232005286872, 'Mosman'],\n",
       " [0.8699430457604701, 'Gladesville - Huntleys Point'],\n",
       " [0.8700433709002836, 'North Parramatta'],\n",
       " [0.8946436418123838, 'Blacktown (West)'],\n",
       " [0.9018624455847417, 'Green Valley'],\n",
       " [0.9070365822790576, 'Liverpool'],\n",
       " [0.9101580891850678, 'Beacon Hill - Narraweena'],\n",
       " [0.910771093364224, 'Southern Highlands'],\n",
       " [0.9316906439614234, 'Manly - Fairlight'],\n",
       " [0.935559156258193, 'Mortdale - Penshurst'],\n",
       " [0.9373449419920941, 'South Hurstville - Blakehurst'],\n",
       " [0.9460660916717224, 'Chatswood (West) - Lane Cove North'],\n",
       " [0.9545615611381354, 'Freshwater - Brookvale'],\n",
       " [0.9553051568978506, 'Ryde'],\n",
       " [0.9567431046083867, 'Narrabeen - Collaroy'],\n",
       " [0.9670833979767909, 'Hill Top - Colo Vale'],\n",
       " [0.9742316179891333, 'St Leonards - Naremburn'],\n",
       " [0.9920825091455956, 'Chatswood (East) - Artarmon'],\n",
       " [0.9959503222934313, 'Cremorne - Cammeray'],\n",
       " [0.996509727525658, 'Crows Nest - Waverton'],\n",
       " [0.9987607517712832, 'Dee Why - North Curl Curl'],\n",
       " [0.9988040917600843, 'Morisset - Cooranbong'],\n",
       " [0.9999705668511422, 'Cessnock Region'],\n",
       " [0.9999995372770759, 'Lithgow'],\n",
       " [nan, 'Holsworthy Military Area']]"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrang1 = arrang.values.tolist()\n",
    "arrang1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the counted area is in the list, it means that the area has been allocated by the government. Here we reduce the probability of fire in the area by 0.01 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "i=0\n",
    "while i <len(arrang1):\n",
    "    if arrang1[i][1] in location_list:\n",
    "        arrang1[i][0]=arrang1[i][0]-0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2740394940403163\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlation.corr(method ='spearman')\n",
    "correlation.describe()\n",
    "#plt.scatter(\"fire_riskscore\", \"median_annual_household_income\", data=correlation)\n",
    "sns.regplot(x=\"fire_riskscore\", y=\"median_annual_household_income\", data=correlation)\n",
    "x= correlation[\"fire_riskscore\"]\n",
    "y=correlation[\"median_annual_household_income\"]\n",
    "z=correlation[\"avg_monthly_rent\"]\n",
    "corr1,_=spearmanr(x,y)\n",
    "print(corr1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1927852285926207\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x=\"fire_riskscore\", y=\"avg_monthly_rent\", data=correlation)\n",
    "corr2,_=spearmanr(x,z)\n",
    "print(corr2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = gpd.read_postgis(\"SELECT geometry, fire_riskscore FROM Shape JOIN arrang ON area_id = SA2_MAIN16\", conn, geom_col='geometry')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (15, 15)\n",
    "graph.plot(column='fire_riskscore', cmap='Oranges', legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "gpu",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  },
  "vscode": {
   "interpreter": {
    "hash": "2757f2873468ef0524962d3e076f5269a607bbca530c7bb340b98d6e03d44b52"
   }
  }

 },
 "nbformat": 4,
 "nbformat_minor": 4
}
